/*
Why do we push to stack at the end of dfs call ?
Let say 1 -> 2 - > 3 -> 4 -> 5
Now you started dfs at 3,
so will insert 5,4,3 in stack 
Now you start at 1
you will keep 5,4,3,2,1 -> this helps in maintaining order using stack

if you keep in start
3,4,5 if you start from 3
then you start from 1 so you will keep 3,4,5,1,2 -> This doesn't maintain order of itmes
*/
class Solution {
    Map<Integer, Set<Integer>> graph = new HashMap<>();
    Set<Integer> globalVisited = new HashSet<Integer>();
    Stack<Integer> stk = new Stack<Integer>();
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        for(int i =0; i < numCourses; i++) {
            graph.put(i, new HashSet<>());
        }

        for(int[] prerequisite : prerequisites) {
            int c1 = prerequisite[0];
            int c2 = prerequisite[1];
            graph.get(c2).add(c1);
        }

        for(int i =0; i < numCourses; i++) {
            if(globalVisited.contains(i)) {
                continue;
            }
            if(isCyclePresent(i, new HashSet<>())) {
                return new int[]{}; //empty array
            }
        }
        globalVisited.clear();
        for(int i =0; i < numCourses; i++) {
            if(globalVisited.contains(i)) {
                continue;
            }
            dfs(i);
        }
        int[] result = new int[stk.size()];
        int index = 0;
        while(!stk.isEmpty()) {
            int item = stk.pop();
            result[index] = item;
            index++;
        }
        return result;
    }

    public void dfs(int course) {
        if(globalVisited.contains(course)) {
            return;
        }
        globalVisited.add(course);
        Set<Integer> neighbours = graph.get(course);
        for(int neighbour : neighbours) {
            dfs(neighbour);
        }
        stk.push(course);
    }

    public boolean isCyclePresent(int course, Set<Integer> seenCourses) {
        if(seenCourses.contains(course)) {
            return true;
        }
        if(globalVisited.contains(course)) {
            return false;
        }
        seenCourses.add(course);
        globalVisited.add(course);
        Set<Integer> neighbours = graph.get(course);
        for(int neighbour : neighbours) {
            if (isCyclePresent(neighbour, seenCourses)) {
                return true;
            }
        }
        seenCourses.remove(course);
        return false;

    }
}


class Solution {
    
    public boolean findCycle(int node, Map<Integer,List<Integer>> graph, int[] visiteded) {
        
        List<Integer> neighbours = graph.get(node);
        
        boolean isCyclePresent = false;
        for(int neighbour : neighbours) {
            
            if(visiteded[neighbour] == 1) {
                return true;
            }
            
            if(visiteded[neighbour] == 2) {
                continue;
            }
            visiteded[neighbour] = 1;
            isCyclePresent = isCyclePresent | findCycle(neighbour, graph, visiteded);
        }
        
        visiteded[node] = 2;
        
        return isCyclePresent;
    }
    
        public void topologicalSort(int node, Map<Integer,List<Integer>> graph, int[] visiteded, Stack<Integer> stk) {
        
        List<Integer> neighbours = graph.get(node);
        
        for(int neighbour : neighbours) {
            
            if(visiteded[neighbour] == 1) {
                continue;
            }
            
            visiteded[neighbour] = 1;
            topologicalSort(neighbour, graph, visiteded, stk);
        }
            
        stk.push(node);
    }
    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        
        Map<Integer,List<Integer>> graph = new HashMap<>();
        
        for(int i=0; i<numCourses; i++) {
            graph.put(i, new ArrayList<>());
        }
        
        for(int[] prerequisite : prerequisites) {
            
                graph.get(prerequisite[1]).add(prerequisite[0]);
        }
        
       
       int[] visiteded = new int[numCourses]; 
       boolean isCyclePresent = false;
        for(int i=0; i<numCourses; i++) {
            if(visiteded[i] == 0) {
                visiteded[i] = 1;
                isCyclePresent = isCyclePresent | findCycle(i, graph, visiteded);
            }
        }
        
        
        if(isCyclePresent) {
            return new int[]{};
        }
        
        visiteded = new int[numCourses]; 
        Stack<Integer> stk = new Stack<Integer>();
        for(int i=0; i<numCourses; i++) {
            if(visiteded[i] == 0) {
                visiteded[i] = 1;
                topologicalSort(i, graph, visiteded, stk);
            }
        }
        
        int[] result = new int[stk.size()];
        int index = 0;
        
        while(!stk.isEmpty()) {
            int node = stk.pop();
            result[index] = node;
            index++;
        }
        
        return result;
        
    }
}



class Solution {
    //find cycle
    //find topological order
    
    
    boolean[] visited;
    boolean isCycle=false;
    List<List<Integer>> graph;
    Stack<Integer> topoOrder=new Stack<Integer>();
    public void traverseGraph(int courseId,boolean[] tempVisited){
     //   System.out.println("child courseId: "+courseId);
        if(tempVisited[courseId]){
            isCycle=true;
            return;
        }
         if(this.visited[courseId]){
             return;
         }
        this.visited[courseId]=true;
        tempVisited[courseId]=true;
        List<Integer> children=this.graph.get(courseId);
        
        for(int child: children){
            
            traverseGraph(child,tempVisited);
        }
           tempVisited[courseId]=false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //check cycle in directed graph
        this.graph=new ArrayList<List<Integer>>();
        this.visited=new boolean[numCourses];
        int totalCourses=numCourses;
        while(totalCourses>0){
            
            graph.add(new ArrayList<Integer>());
            totalCourses--;
        }
        
        for(int[] prerequisite: prerequisites){
          graph.get(prerequisite[1]).add(prerequisite[0]);  
        }
        
        for(int courseId=0;courseId<numCourses;courseId++){
            
            if(!visited[courseId]){
           boolean[] tempVisited=new boolean[numCourses];
                traverseGraph(courseId,tempVisited);
            }
            if(isCycle){
                return !this.isCycle;
            }
            
        }
        
        return !this.isCycle;
    }
    
    public void findTopologicalOrder(int courseId){
        if(this.visited[courseId]){
            return;
        }
        this.visited[courseId]=true;
        List<Integer> children=this.graph.get(courseId);
        
        for(int child: children){
            
            findTopologicalOrder(child);
        }
           this.topoOrder.push(courseId);
    }
    
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        
        if(canFinish(numCourses,prerequisites)){ //check for presence of cycle
            //find topological order
          
            this.visited=new boolean[numCourses];
            
            for(int courseId=0;courseId<numCourses;courseId++){
            
            if(!this.visited[courseId]){
                findTopologicalOrder(courseId);
            }
                
              
        }
         int[] topoSequence=new int[topoOrder.size()];
              int index=0;
                while(!topoOrder.isEmpty()){
                    topoSequence[index]=topoOrder.pop();
                        index++;
                }
            
            return topoSequence;
        }else{
            return new int[]{};
        }
    }
}
