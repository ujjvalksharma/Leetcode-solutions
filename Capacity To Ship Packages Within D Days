class Solution {
    /*
    simple do a binary search on upper  (sum of all elements)  and lower bound (the maximum number in arrary) and then for each mid find wether we can meet the required days paramter by looping through the array.
    
    */
  public int shipWithinDays(int[] weights, int D) {
        int l = Arrays.stream(weights).max().getAsInt();
        int h = Arrays.stream(weights).sum();
        int ans = 0;
        while (l <= h) {
            int mid = (l + h) / 2;
            if (getDaysToPackage(weights, mid) > D) {
                l = mid + 1;
            } else {
                ans = mid;
                h = mid - 1;
            }
        }
        return ans;
    }

    private int getDaysToPackage(int[] weights, int shipSize) {
        int n = weights.length;
        int daysReq = 1;
        int currSum = 0;
        for (int i = 0; i < n; i++) {
            currSum += weights[i];
            if (currSum > shipSize) {
                currSum = weights[i];
                daysReq++;
            }
        }
        return daysReq;
    }
}
