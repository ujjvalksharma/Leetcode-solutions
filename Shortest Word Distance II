/*
Store indexs of a word in hashmap and when we get list of words, we basicially get two sorted array of index, and we want index to as close as possible, we increment the pointer which points to samller values as arrays of indexs are in increasing order.
*/
class WordDistance {
    
HashMap<String,List<Integer>> hmWordToIndex;
    public WordDistance(String[] wordsDict) {
        this.hmWordToIndex=new HashMap<String,List<Integer>>();
        
        for(int i=0;i<wordsDict.length;i++){
            if(!this.hmWordToIndex.containsKey(wordsDict[i])){
               this.hmWordToIndex.put(wordsDict[i],new ArrayList<Integer>()); 
            }
            this.hmWordToIndex.get(wordsDict[i]).add(i);
        }
        
        
   
        
        
    }
    
    public int shortest(String word1, String word2) {
        
     List<Integer>   loc1 = this.hmWordToIndex.get(word1);
     List<Integer>   loc2 = this.hmWordToIndex.get(word2);
     int minDiff = Integer.MAX_VALUE;
        
        int l1=0;
        int l2=0;
        
        while(l1<loc1.size()&&l2<loc2.size()){
            
            minDiff=Math.min(minDiff,Math.abs(loc1.get(l1)-loc2.get(l2)));
            
            if(loc1.get(l1)<=loc2.get(l2)){
                l1++; // we increment l1, as we want values to get closer
            }else{
                l2++;
            }
        }
        
        return minDiff;
    }
}

/**
 * Your WordDistance object will be instantiated and called as such:
 * WordDistance obj = new WordDistance(wordsDict);
 * int param_1 = obj.shortest(word1,word2);
 */

//  .  .  .  .  .  .  .  .  .  .
