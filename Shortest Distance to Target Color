/*
Solution1:
Treeset+hashmap to find floor and key value for a index. hashmap to store index of different color
*/
/*
Solution2: First visit the color value from left to right and keep track of nearest value of color (1,2,3) index from left to right  and similarly, do it for right.
After that, when we get a query then we know in O(1) time for each the qeury the neast color would be either from left or right.

*/
class Solution {
    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
           Map<Integer, TreeSet<Integer>> map = new HashMap<>();
           for(int i=0;i<colors.length;i++){
               if(map.containsKey(colors[i])==false){
                     map.put(colors[i], new TreeSet<>());
               }
               
               map.get(colors[i]).add(i);
           }
        
           List<Integer> list = new ArrayList<>();
           for(int[] ele: queries){
               int color = ele[1];
               if(map.containsKey(color)==false){
                   list.add(-1);
                   continue;
               }
               
               TreeSet<Integer> set = map.get(color);
               Integer pre = set.floor(ele[0]);
               Integer next = set.ceiling(ele[0]);
               int ans = Integer.MAX_VALUE;
               if(pre!=null){
                   ans = Math.abs(pre-ele[0]);
               }
               if(next!=null){
                   ans = Math.min(ans, Math.abs(next - ele[0]));
               }
               
               list.add(ans == Integer.MAX_VALUE?-1:ans);
           }
        
           return list;
    }
}
