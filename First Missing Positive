
/*

Solution :

missing number will be from 1 : nums.length + 1

1) Convert all negative to 0 since we don't care about them
2) Push all zero to right side and decrement index = nums.length - 1
3) iterate from 0 to index and if nums[i] < num.length then mark nums[i] = negative to show it ith number is present and not mssing
4) visit i=0 to nums.length and see if nums[i]>=0 that means ith number is missing.


*/
class Solution {
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public int firstMissingPositive(int[] nums) {
        
        if(nums.length == 1) {
            if(nums[0] == 1) {
                return 2;
            }
            return 1;
        }
        //mark all negative numbers as 0 since we don't care about them
        
        
        for(int i=0; i<nums.length; i++) {
            if(nums[i] < 0) {
               nums[i] = 0; 
            }
        }
        
        //shift all zero to right
        
        int index = nums.length - 1;
        
        int start = 0;
        
        while(start < nums.length && start < index) {
            
            if(nums[start] == 0) {
                swap(nums, start, index);
                index--;
            } else {
                start++;
            }
        }
        
        for(int i=0; i<=index; i++) {
            
            int absNum = Math.abs(nums[i]);
            if(absNum <= nums.length && nums[i] != 0) {
                int tempIndex = absNum - 1;
                nums[tempIndex] = -1 * Math.abs(nums[tempIndex]);
                
            }
            
        }
        
        for(int i=0; i<nums.length; i++) {
            
            if(nums[i] >= 0) {
                return i + 1;
            }
        }
        
        return nums.length + 1;
        
    }
}
/*

the missing positive number would be between 1 : nums.length

[3,4,0,1]

*/
