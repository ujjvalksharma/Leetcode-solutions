class MedianFinder {
    
    PriorityQueue<Integer> leftHeap;
    PriorityQueue<Integer> rightHeap;
    public MedianFinder() {
        this.leftHeap=new PriorityQueue<Integer>((a,b)->b-a);
        this.rightHeap=new PriorityQueue<Integer>((a,b)->a-b);
    }
    
    public void addNum(int num) {
        
        int totalElements=leftHeap.size()+rightHeap.size();
        
        if(totalElements==0){
            leftHeap.add(num);
        } else if (totalElements%2==0){
            
            if(num<=leftHeap.peek()){
                leftHeap.add(num);
            } else {
                rightHeap.add(num);
                leftHeap.add(rightHeap.poll());
            }
            
        } else{
            
            if(num>= leftHeap.peek() ){
                rightHeap.add(num);
            } else {
                leftHeap.add(num);
                rightHeap.add(leftHeap.poll());
            }
            
        }
        
        
    }
    
    public double findMedian() {
        
        int totalElements=leftHeap.size()+rightHeap.size();
        if(totalElements%2==0){
            
            double median = (double) (leftHeap.peek()+rightHeap.peek())/2;
            return median;
        }else {
            return leftHeap.peek();
        }
        
    }
}



/*


How to find median:
total-element = 2 heap size 

Case 1:total-element == even then addition of top of both heap/2
Case 2: total-element == odd then left heap top


Filling heap:
Cases 1: both heap is empty: then push to left heap
Case 2: if total heap size == even, then check if lef heap top >=num, insert in left else insert in right heap and take out top of right heap
case 3 if total heap size is odd, then insert in right heap if element is >= right heap top else insert in left heap and take out top and put in right heap



*/

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */

    /*
    https://www.youtube.com/watch?v=1LkOrc-Le-Y
    
    We keep track of maxheap from left subarray and min heap from right subarry and middle elemet is mean. for our convience we take maxheap>=minheap+1
    
    */

class MedianFinder {

    /** initialize your data structure here. */
    PriorityQueue<Integer> leftArr; //max heap
    PriorityQueue<Integer> rightArr; //min heap
    public MedianFinder() {
        
        leftArr=new PriorityQueue<Integer>((Integer a, Integer b)->{
            return b-a;
        });
        rightArr=new PriorityQueue<Integer>((Integer a, Integer b)->{
            return a-b;
        });
    }
    
    public void addNum(int num) {
        
        if(rightArr.isEmpty()){ 
            rightArr.add(num);//first time insert in right
        }else if(leftArr.isEmpty()){
            
            if(num<=rightArr.peek()){ //insert in left as element lies in left side
                leftArr.add(num);
            }else{
                //right side has less element so we take it out and insert in left and put greater in right
                   int rightMaxNum=rightArr.poll();
                    rightArr.add(num);
                    leftArr.add(rightMaxNum); 
            }
        
            
        } else{
            
        int rightSize=rightArr.size();
        int leftSize=leftArr.size(); 
            //in this since size was equal/even, the new element will sum of subrray arr or right and left becomes odd, so we right subrray has a extra element than left
            if(rightSize==leftSize){
                
                //take out max from left and insert into right and insert small one left
                 if(num<=leftArr.peek()){
                     
                    int leftMaxNum=leftArr.poll(); 
                    leftArr.add(num);
                    rightArr.add(leftMaxNum);
                     
                 }else{ //element is large, so directly insert in right arr
                     rightArr.add(num); //insert in right as it lies in right
                 }
                
            }else{
                
                //we insert at left array as we know element lies of left hand side and if we insert in right then right side size becomes greater by 2
                if(num<=rightArr.peek()){
                    leftArr.add(num);
                }else{ //element from right min is taken and insert to left, as we have to make size equal between left and right 
                    
                    int rightMaxNum=rightArr.poll();
                    rightArr.add(num);
                    leftArr.add(rightMaxNum);
                }
            }
        }
        
    }
    
    public double findMedian() {
        
        int rightSize=rightArr.size();
        int leftSize=leftArr.size();

        if(rightSize==leftSize){
            
            int sum=rightArr.peek()+leftArr.peek();
            double median= (double) sum/2;
            return median;
        }else{
            return (double) rightArr.peek();
        }
        
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
