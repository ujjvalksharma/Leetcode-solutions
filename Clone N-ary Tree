/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    
    public Node() {
        children = new ArrayList<Node>();
    }
    
    public Node(int _val) {
        val = _val;
        children = new ArrayList<Node>();
    }
    
    public Node(int _val,ArrayList<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

/*
DFS through the actual tree and form nodes on the go and keep track of the clone along with actual node

*/
class Solution {
    
    public void cloneTreeHelper(Node actualNode, Node cloneNode) {
        
        List<Node> children = actualNode.children;
        
        for(int i=0; i<children.size(); i++) {
            
            if(children.get(i) != null) {
                cloneNode.children.add(new Node(children.get(i).val));
            } else {
                cloneNode.children.add(null);
            }
            
            cloneTreeHelper(children.get(i), cloneNode.children.get(i));
            
        }
        
        
    }
    public Node cloneTree(Node root) {
        
        if(root == null) {
            return null;
        }
        
        Node cloneHead = new Node(root.val);
        
        List<Node> children = root.children;
        
        for(int i=0; i<children.size(); i++) {
            
            if(children.get(i) != null) {
            cloneHead.children.add(new Node(children.get(i).val));
            } else {
            cloneHead.children.add(null);
            }
            cloneTreeHelper(children.get(i), cloneHead.children.get(i));
            
        }
        
            
        return cloneHead;
        
    }
}
