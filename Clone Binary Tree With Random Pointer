/**
 * Definition for Node.
 * public class Node {
 *     int val;
 *     Node left;
 *     Node right;
 *     Node random;
 *     Node() {}
 *     Node(int val) { this.val = val; }
 *     Node(int val, Node left, Node right, Node random) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *         this.random = random;
 *     }
 * }
 */

class Solution {
    
    Map<Node, NodeCopy> map = new HashMap<Node, NodeCopy>();
    
    public void createCloneNode(Node originalRoot, NodeCopy cloneRoot) {
        
        cloneRoot.val = originalRoot.val;
        if(originalRoot.left != null) {
            NodeCopy cloneLeftNode = new NodeCopy(originalRoot.left.val);
            cloneRoot.left = cloneLeftNode;
            createCloneNode(originalRoot.left, cloneLeftNode);
        }
        
        if(originalRoot.right != null) {
            NodeCopy cloneRightNode = new NodeCopy(originalRoot.right.val);
            cloneRoot.right = cloneRightNode;
            createCloneNode(originalRoot.right, cloneRightNode);
        }
        map.put(originalRoot, cloneRoot);
    }
    
    public void copyRandomPointer(Node originalRoot, NodeCopy cloneRoot) {
        
        if(originalRoot.left != null ) {
            copyRandomPointer(originalRoot.left, cloneRoot.left);
        }
        
        if(originalRoot.right != null ) {
            copyRandomPointer(originalRoot.right, cloneRoot.right);
        }
        
        if(originalRoot.random != null ){
            cloneRoot.random = map.get(originalRoot.random);
        }
    }
    public NodeCopy copyRandomBinaryTree(Node root) {
        
        if(root == null) {
            return null;
        }
        
        NodeCopy clonedRoot = new NodeCopy();
        createCloneNode(root, clonedRoot);
        copyRandomPointer(root, clonedRoot);
        
        return clonedRoot;
    }
}
