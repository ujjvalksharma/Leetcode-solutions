class Solution {
    Map<Integer, Set<Integer>> graph = new HashMap<>();
    Set<Integer> globalVisited = new HashSet<Integer>();
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        for(int i =0; i < numCourses; i++) {
            graph.put(i, new HashSet<>());
        }

        for(int[] prerequisite : prerequisites) {
            int c1 = prerequisite[0];
            int c2 = prerequisite[1];
            graph.get(c1).add(c2);
        }

        for(int i =0; i < numCourses; i++) {
            if(globalVisited.contains(i)) {
                continue;
            }
            if(isCyclePresent(i, new HashSet<>())) {
                return false;
            }
        }

        return true;

    }

    public boolean isCyclePresent(int course, Set<Integer> seenCourses) {
        if(seenCourses.contains(course)) {
            return true;
        }
        if(globalVisited.contains(course)) {
            return false;
        }
        seenCourses.add(course);
        globalVisited.add(course);
        Set<Integer> neighbours = graph.get(course);
        for(int neighbour : neighbours) {
            if (isCyclePresent(neighbour, seenCourses)) {
                return true;
            }
        }
        seenCourses.remove(course);
        return false;

    }
 }


class Solution {
    
    boolean[] visited;
    boolean isCycle=false;
    List<List<Integer>> graph;
    public void traverseGraph(int courseId,boolean[] tempVisited){
     //   System.out.println("child courseId: "+courseId);
        if(tempVisited[courseId]){
            isCycle=true;
            return;
        }
         if(this.visited[courseId]){
             return;
         }
        this.visited[courseId]=true;
        tempVisited[courseId]=true;
        List<Integer> children=this.graph.get(courseId);
        
        for(int child: children){
            
            traverseGraph(child,tempVisited);
        }
           tempVisited[courseId]=false;
    }
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        //check cycle in directed graph
        this.graph=new ArrayList<List<Integer>>();
        this.visited=new boolean[numCourses];
        int totalCourses=numCourses;
        while(totalCourses>0){
            
            graph.add(new ArrayList<Integer>());
            totalCourses--;
        }
        
        for(int[] prerequisite: prerequisites){
          graph.get(prerequisite[1]).add(prerequisite[0]);  
        }
        
        for(int courseId=0;courseId<numCourses;courseId++){
            
            if(!visited[courseId]){
           boolean[] tempVisited=new boolean[numCourses];
                traverseGraph(courseId,tempVisited);
            }
            if(isCycle){
                return !this.isCycle;
            }
            
        }
        
        return !this.isCycle;
    }
}
/*
[a,b]
b->a
*/
