class Solution {
Map < String, String > hmEmailToName = new HashMap < > ();
 Map < String,String > hmEmailToParent = new HashMap < > ();
     Map <String, Set<String> > hmEmailToFinalParent = new HashMap < > ();
    public String find(String email){
        if(hmEmailToParent.get(email).equals(email)){
            return email;
        }
        return find(hmEmailToParent.get(email));
    }
    /*
    Map email to name
    union and find all the adjacent emails to make emails fall in the same connected component
    make another map hmEmailToFinalParent so we can find final parent of each email and attach children together for each email
    
    
    */
    public List<List<String>> accountsMerge(List < List < String >> accounts) {

       List<List<String>> answer=new ArrayList<>();
        for (int i = 0; i <accounts.size(); i++) {
            for (int j = 1; j < accounts.get(i).size(); j++) {
                hmEmailToName.put(accounts.get(i).get(j), accounts.get(i).get(0));
                hmEmailToParent.put(accounts.get(i).get(j), accounts.get(i).get(1));
            }
        }

        for (int i = 0; i < accounts.size(); i++) {
            for (int j = 2; j < accounts.get(i).size(); j++) {

                //find
                String parentEmail1 = find(accounts.get(i).get(j-1));
                String parentEmail2 = find(accounts.get(i).get(j));

                if (!parentEmail1.equals(parentEmail2)) {
                    //union
                    hmEmailToParent.put(parentEmail2, parentEmail1);
                }
            }
        }
        
        for(String email: hmEmailToParent.keySet()){
            String parent=find(email);
            if(!hmEmailToFinalParent.containsKey(parent)){
                hmEmailToFinalParent.put(parent, new HashSet<String>());
            }
            hmEmailToFinalParent.get(parent).add(email);
        }
        
         for(String email: hmEmailToFinalParent.keySet()){
             List<String> mergedAccount=new ArrayList<String>();
             List<String> emails=new ArrayList<>(hmEmailToFinalParent.get(email));
             Collections.sort(emails);
             mergedAccount.add(hmEmailToName.get(email));
             mergedAccount.addAll(emails);
                 answer.add(mergedAccount);
         }
        System.out.println(hmEmailToFinalParent);
        
        return answer;
    }
    

}
