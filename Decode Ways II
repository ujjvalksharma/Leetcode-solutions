class Solution {
/*
Same as decode 1 in which character can be digit and digit can be character.


*/
   int MOD = 1000000007;
    HashMap<String, Integer> map2;
    Long[] cache;
	
    long helper(String s, int index){
        if(index>=s.length()) return 1;
        if(s.charAt(index)=='0') return 0;
        if(cache[index] != null) return cache[index];
        int ways = s.charAt(index)=='*'?9:1;
        long ans= ways*helper(s,index+1);
        if((index+1 <s.length()) && (s.charAt(index)=='1' || s.charAt(index)=='2' || s.charAt(index)=='*') ){
            String ch = "" + s.charAt(index) + s.charAt(index+1);
            ans = ans + map2.getOrDefault(ch, 1) * helper(s,index+2);
        }
        ans=ans%MOD;
        cache[index]=ans;
        return ans;
    }


    public int numDecodings(String s) {
        map2=new HashMap<>();
        cache=new Long[s.length()+1];

        for(int i=0;i<=6;i++) map2.put("*"+i,2); // (10,20=>2)...(16,26=>2)

        map2.put("**", 15);map2.put("1*", 9);map2.put("2*", 6);
        map2.put("27", 0);map2.put("28", 0);map2.put("29", 0);

        return (int) helper(s,0);
    }
}
