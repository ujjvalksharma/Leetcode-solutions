/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public void dfs(TreeNode root, List<Integer> leafNodes) {
        
        if(root == null) {
            return;
        }
        
        if(root.left == null && root.right == null) {
            leafNodes.add(root.val);
        }
        dfs(root.left, leafNodes);
        dfs(root.right, leafNodes);  
    }
    public boolean leafSimilar(TreeNode root1, TreeNode root2) {
        
        List<Integer> leafOfRoot1 = new ArrayList<Integer>();
        List<Integer> leafOfRoot2 = new ArrayList<Integer>();
        dfs(root1, leafOfRoot1);
        dfs(root2, leafOfRoot2);
        System.out.println("leafOfRoot1: " + leafOfRoot1);
        System.out.println("leafOfRoot2: " + leafOfRoot2);
        return leafOfRoot1.equals(leafOfRoot2);
    }
}
