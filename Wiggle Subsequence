class Solution {
    /*
    recursion +memory
    In this question, we find all subsequence and keep a note of sign changing.  we know from a index it can form subsequence with index+1.....n, to not iterate the sub-tree again we store in memory the sign and index. different value can come if sign changes at an index. Hence we have store them in pair.
    */
    HashMap<String,Integer> hmIndexSignToLength=new HashMap<>();
    public int wiggleMaxLengthHelper(int index,char sign,int[] nums){
        if(index>=nums.length-1){
return 0;
        }
        int maxWiggleLength=0;
         int currentDiff=0;
        char newSign='S';
        if(hmIndexSignToLength.containsKey(index+"-"+sign)){ //memory 2+"-"+P //2-P
            return hmIndexSignToLength.get(index+"-"+sign);
        }
        for(int i=index+1;i<nums.length;i++){ //iterate over subsequence from index+1.........n

            currentDiff=nums[i]-nums[index];
            if(sign=='S'){
                if(currentDiff<0){
                    newSign='N';
                }else{
                    newSign='P';
                }
                
            }
            else{
                if(currentDiff<0&&sign=='N'){
                    continue;
                }
                
                
                if(currentDiff>0&&sign=='P'){
                    continue;
                }
                
                 if(currentDiff<0){
                    newSign='N';
                }else{
                    newSign='P';
                }
            }
                if(nums[i]==nums[index]){
                    continue;
                }
        //    System.out.println("prev:"+nums[index]+"new num:"+nums[i]);
            maxWiggleLength=Math.max(maxWiggleLength,wiggleMaxLengthHelper(i,newSign,nums)+1);
            }
        
      //  System.out.println("prev:"+nums[index]+"maxWiggleLength:"+maxWiggleLength);
        hmIndexSignToLength.put(index+"-"+sign,maxWiggleLength);
        return maxWiggleLength;
    }
    public int wiggleMaxLength(int[] nums) {
        
        if(nums.length==0){
            return 0;
        }
        int maxWiggleLength=0;
        
        for(int i=0;i<nums.length;i++){
        maxWiggleLength=Math.max(maxWiggleLength,wiggleMaxLengthHelper(i,'S',nums));
            }
        
        return maxWiggleLength+1;
        
    }
}

/*

class Solution{

    public int wiggleMaxLengthHelper(int index,char sign,int[] nums){
        if(index>=nums.length-1){
return 0;
        }
        int maxWiggleLength=0;
         int currentDiff=0;
        char newSign='S';
        for(int i=index+1;i<nums.length;i++){ //iterate over subsequence from index+1.........n

            currentDiff=nums[i]-nums[index];
            if(sign=='S'){
                if(currentDiff<0){
                    newSign='N';
                }else{
                    newSign='P';
                }
                
            }
            else{
                if(currentDiff<0&&sign=='N'){
                    continue;
                }
                
                
                if(currentDiff>0&&sign=='P'){
                    continue;
                }
                
                 if(currentDiff<0){
                    newSign='N';
                }else{
                    newSign='P';
                }
            }
                if(nums[i]==nums[index]){
                    continue;
                }
        //    System.out.println("prev:"+nums[index]+"new num:"+nums[i]);
            maxWiggleLength=Math.max(maxWiggleLength,wiggleMaxLengthHelper(i,newSign,nums)+1);
            }
        
        return maxWiggleLength;
    }
    public int wiggleMaxLength(int[] nums) {
        
        if(nums.length==0){
            return 0;
        }
        int maxWiggleLength=0;
        
        for(int i=0;i<nums.length;i++){
        maxWiggleLength=Math.max(maxWiggleLength,wiggleMaxLengthHelper(i,'S',nums));
            }
        
        return maxWiggleLength+1;
        
    }
}

*/
