class Solution {
    List<String> result = new ArrayList<>();
    Map<Integer,String> digitToLetters = new HashMap<>();
    public void letterCombinationsHelper(String digits, int index, StringBuilder temp) {
        
        if(index >= digits.length() && temp.length() > 0) {
            result.add(temp.toString());
            return;
        }
        
        if(index >= digits.length()) {
            return;
        }
        
        int digit = Character.getNumericValue(digits.charAt(index));
        String letters = digitToLetters.get(digit);
        for(int i=0 ; i<letters.length(); i++) {
            char letter = letters.charAt(i);
            temp.append(letter);
            letterCombinationsHelper(digits, index + 1, temp);
            temp.setLength(temp.length() - 1);
        }
        
    }
    public List<String> letterCombinations(String digits) {
        
        if(digits.length() == 0) {
            return new ArrayList<String>();
        }
        
        digitToLetters.put(2, "abc");
        digitToLetters.put(3, "def");
        digitToLetters.put(4, "ghi");
        digitToLetters.put(5, "jkl");
        digitToLetters.put(6, "mno");
        digitToLetters.put(7, "pqrs");
        digitToLetters.put(8, "tuv");
        digitToLetters.put(9, "wxyz");
        letterCombinationsHelper(digits, 0, new StringBuilder(""));
        return result;
        
        
    }
}




//simple dfs
class Solution {
    
    List<String> result = new ArrayList<>();
    Map<Character,String> map = new HashMap<>();
    
    public void letterCombinationsHelper(String digits, int index, StringBuilder tempResult) {
        
        if(index >= digits.length()) {
            result.add(tempResult.toString());
            return;
        }
        
        
        String letters = map.get(digits.charAt(index));
        
        for(int i=0; i<letters.length(); i++) {
            tempResult.append(letters.charAt(i));
            letterCombinationsHelper(digits, index + 1, tempResult);
            tempResult.setLength(tempResult.length() - 1);
        }
    }
    public List<String> letterCombinations(String digits) {
        
        if(digits.length() == 0) { 
            return result;
        }
        
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        
        letterCombinationsHelper(digits, 0, new StringBuilder(""));
        return result;
        
    }
}

class Solution {
/*
Simple recursion in which each digit is mapped to 3 or 4 character, and then we form the string using a recursive tree.

*/
    HashMap<Character,List<Character>> hm;
    List<String> answer= new ArrayList<String>();
    
    public void FindAllCombinations(String str,int start,String mydigit)
    {
        if(start>=str.length())
        {
            answer.add(mydigit);
            return;
        }
        
       
            char temp_digit=str.charAt(start);
            List<Character> list=hm.get(temp_digit);
            
            for(int j=0;j<list.size();j++)
            {
              FindAllCombinations(str,start+1,mydigit+Character.toString(list.get(j)));  
            }
        
        
    }
    
    public List<String> letterCombinations(String digits) {
        
        if(digits.equals(""))
            return answer;
        
      hm  = new HashMap<Character,List<Character>>();
        List<Character> list= new ArrayList<Character>();
        list.add('a');
        list.add('b');
        list.add('c');
      hm.put('2',list);
        list= new ArrayList<Character>();
         list.add('d');
        list.add('e');
        list.add('f');
      hm.put('3',list);
          list= new ArrayList<Character>();
         list.add('g');
        list.add('h');
        list.add('i');
      hm.put('4',list);
           list= new ArrayList<Character>();
         list.add('j');
        list.add('k');
        list.add('l');
      hm.put('5',list);
              list= new ArrayList<Character>();
         list.add('m');
        list.add('n');
        list.add('o');
      hm.put('6',list);
           list= new ArrayList<Character>();
         list.add('p');
        list.add('q');
        list.add('r');
         list.add('s');
      hm.put('7',list);
           list= new ArrayList<Character>();
         list.add('t');
        list.add('u');
        list.add('v');
      hm.put('8',list);
           list= new ArrayList<Character>();
         list.add('w');
        list.add('x');
        list.add('y');
        list.add('z');
      hm.put('9',list);
        
        FindAllCombinations(digits,0,"");
        
        return answer;
        
    }
}
