/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> rightSideView=new ArrayList<>();
    
    public void rightSideViewHelper(TreeNode root, int level){
        if(root==null){
            return;
        }
        if(rightSideView.size()==level){
            rightSideView.add(-1);// temp
        }
        rightSideView.set(level,root.val);
        rightSideViewHelper(root.left,level+1);
        rightSideViewHelper(root.right,level+1);
    }
    public List<Integer> rightSideView(TreeNode root) {
        
        rightSideViewHelper(root,0);
        
        return rightSideView;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        

        List<Integer>  result = new ArrayList<Integer>();
        
        if(root == null){
            return result;
        }
        
        Queue<TreeNode> bfsQueue = new LinkedList<TreeNode>();
        bfsQueue.add(root);
        bfsQueue.add(null);
        int rightMostNodeVal = root.val;
        while(!bfsQueue.isEmpty()){
            
            TreeNode currentNode = bfsQueue.poll();
            if(currentNode != null){
                rightMostNodeVal = currentNode.val;
              //  System.out.println("currentNode.val: "+currentNode.val);
                if(currentNode.left!=null){
                    bfsQueue.add(currentNode.left);
                }
                
                if(currentNode.right!=null){
                    bfsQueue.add(currentNode.right);
                }
                
            } else {
              //  System.out.println("level end");
                result.add(rightMostNodeVal);
                if(bfsQueue.isEmpty()){
                    break;
                }
                bfsQueue.add(null);
                
            }
        }
        
        return result;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    List<Integer> result = new ArrayList<Integer>();
    
    public void rightSideViewHelper(TreeNode root, int level){
        if(root == null){
            return;
        }
        
        if(root.left!=null){
            if(result.size() == level+1){
                result.add(0);
            }
            result.set(level+1,root.left.val);
            rightSideViewHelper(root.left,level+1);
        }
        
        if(root.right!=null){
            if(result.size() == level+1){
                result.add(0);
            }
            result.set(level+1,root.right.val);
            rightSideViewHelper(root.right,level+1);
        }
        
    }
    public List<Integer> rightSideView(TreeNode root) {
        if(root == null){
            return result;
        }
        result.add(root.val);
        rightSideViewHelper(root,0);
        
        return result;
    }
}
