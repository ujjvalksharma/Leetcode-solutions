class Solution {
    
    public void reverse(char[] s, int start, int end) {
        while(start < end) {
            char temp = s[start];
            s[start] = s[end];
            s[end] = temp;
            start++;
            end--;
        }
    }
    public void reverseWords(char[] s) {
        
        int start = 0;
        int end = 0;
        for(int i=0; i<s.length; i++) {
            
            if(s[i] == ' ') {
                end = i -1;
                reverse(s,start, end);
                start = i + 1;
            }
            
        }
        
        reverse(s, start, s.length - 1);
        reverse(s, 0, s.length - 1);
        
    }
}

/*

["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]

["e","t","t"," ","y","k","s"," ","s","i"," ","e","u","l","b"]
 
*/

/*
First reverse the entire string and then reverse each word in the string.

*/

class Solution {
    
    public void swap(char[] s, int start, int end){
        
        char temp=s[start];
        s[start]=s[end];
        s[end]=temp;
    }
    
    public void reverseWordsHelper(char[] s, int start, int end){
        
        
        while(start<end){
            
            swap(s,start,end);
            
            start++;
            end--;
        }
    }
    public void reverseWords(char[] s) {
        
        //reverse entire string
     reverseWordsHelper(s,0,s.length-1);
        
        
    int start=0;
      // reverse each word in the string
        while(start<s.length){
            
            
            while(start<s.length&&s[start]==' '){
                start++;
            }
            int end=start+1;
            
             while(end<s.length&&s[end]!=' '){
                end++;
            }
            end--;
             reverseWordsHelper(s,start,end);
            start=end+2;      
            
        }
        
       // System.out.println(Arrays.toString(s));
    }
}
