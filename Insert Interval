class Solution {

    /*

    The new interval can come at 
    1) start
    2) end
    3) merged
    4) between two  interval

    */
    public int[][] insert(int[][] intervals, int[] newInterval) {

        if(intervals.length == 0) {
            return new int[][]{newInterval};
        }

        List<int[]> list = new ArrayList<>();
        boolean isNewIntervalUsed = false;

        if(newInterval[1] < intervals[0][0]) { //start
            list.add(newInterval);
            isNewIntervalUsed = true;

        }
        for(int[] interval :  intervals) {

            if(interval[0] > newInterval[1] && !isNewIntervalUsed) { //between two  interval 
                list.add(newInterval);
                isNewIntervalUsed = true;
            }
            if(!isNewIntervalUsed && overlap(interval, newInterval)) { //merged
                int[] temp1 = merged(interval, newInterval);
                list.add(temp1);
                isNewIntervalUsed = true;
            } else if(list.size() >= 1 && isNewIntervalUsed && overlap(interval, list.get(list.size() - 1))) {
                int[] oldInterval = list.get(list.size() - 1);
                list.remove(list.size() - 1);
                list.add(merged(oldInterval, interval));
            } else {
                list.add(interval);
            }
        }

        if(!isNewIntervalUsed) { // end
            list.add(newInterval);
        }

        int[][] result = new int[list.size()][2];
        for(int i = 0; i < list.size(); i++) {
            result[i] = list.get(i);
        }
        return result;
        
    }

    public boolean overlap(int[] interval1, int[] interval2) {
        return !(interval1[1] < interval2[0] || interval2[1] < interval1[0]);
    }

    public int[] merged(int[] interval1, int[] interval2) {
        int min = Math.min(interval1[0], interval2[0]);
        int max = Math.max(interval1[1], interval2[1]);
        return new int[]{min, max};
    }
}
