class Solution {
    public int climbStairs(int n) {
        
        if(n==1){
            return 1;
        }
        
        int[] dp=new int[n+1];
        dp[0]=1;//base case
        dp[1]=1;
        
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2];
        }
        
        return dp[n];
        
    }
}

class Solution {
    
    public int climbStairsHelper(int n, int[] dp){
        
        if(n==0){
            return 1;
        }
        
        if(n<0){
            return 0;
        }
        
        if(dp[n]!=-1){
            return dp[n];
        }
        
       int numberOfWaysByTaking1Step = climbStairsHelper(n-1, dp);
       int numberOfWaysByTaking2Step = climbStairsHelper(n-2, dp);
        
        int totalWays=numberOfWaysByTaking2Step+numberOfWaysByTaking1Step;
        dp[n]=totalWays;
        return totalWays;
    }
    public int climbStairs(int n) {
        
        int[] dp=new int[n+1];
        Arrays.fill(dp,-1);
        return climbStairsHelper(n,dp);
        
    }
    
    /*
    n==4 => 5
    4
    1+1+1
    1+2
    2+1
    
    5+ 
    
    
    
    
    */
}

// Using recursion + memorization
class Solution {
    HashMap<Integer,Integer> positionToSteps=new HashMap<Integer,Integer>();
    /*
    We can memorizate a position because we know that we are going to see a position again and we will call the same recursive tree to find steps by taking 1 step and 2 step at a time.
    
    */
    public int climbStairsHelper(int position,int maxPosition){
        if(position==maxPosition){
            return 1;
        }
        if(position>maxPosition){
            return 0;
        }
        if(positionToSteps.containsKey(position)){
            return positionToSteps.get(position);
        }
        
        int totalStepsByTaking1Step= climbStairsHelper(position+1,maxPosition);
         int totalStepsByTaking2Step= climbStairsHelper(position+2,maxPosition);
        int totalSteps=totalStepsByTaking1Step+totalStepsByTaking2Step;
        positionToSteps.put(position,totalSteps);
        return totalSteps;
    }
    public int climbStairs(int n) {
        
        return climbStairsHelper(0,n);
        
    }
}
// recursion
class Solution {
    /*
    We can memorizate a position because we know that we are going to see a position again and we will call the same recursive tree to find steps by taking 1 step and 2 step at a time.
    
    */
    public int climbStairsHelper(int position,int maxPosition){
        if(position==maxPosition){
            return 1;
        }
        if(position>maxPosition){
            return 0;
        }
        
        int totalStepsByTaking1Step= climbStairsHelper(position+1,maxPosition);
         int totalStepsByTaking2Step= climbStairsHelper(position+2,maxPosition);
        int totalSteps=totalStepsByTaking1Step+totalStepsByTaking2Step;
        return totalSteps;
    }
    public int climbStairs(int n) {
        
        return climbStairsHelper(0,n);
        
    }
}
