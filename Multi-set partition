import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MultiSetPartition {
	
	List<List<Integer>> answer;
	boolean[] visited;
	int globalK;
	
	
	private void findAllPartition(int index, int k, int[] arr,List<Integer> currentList) {
		
		boolean isAllIndexVisited=true;
		
		for(boolean visit: visited) {
			isAllIndexVisited=isAllIndexVisited&visit;
		}
		
		if(isAllIndexVisited&&k==0) {
			System.out.println(answer);
			answer.remove(answer.size()-1);
			return;	
		}
		
		if(isAllIndexVisited&&k>0) {
			return;
		}
		
		if(index>=arr.length&&k==0&&isAllIndexVisited==false) {
			return;
		}
		
		if(index>=arr.length&&k>0) {
			
			if(currentList.size()>0&&currentList.size()<=arr.length/globalK) {
				answer.add(new ArrayList<Integer>(currentList));
				List<Integer> tempCurrentlist=new ArrayList<Integer>();
				findAllPartition(0,k-1,arr,tempCurrentlist);
			}
			return;
			
			
		}else if(k<0&&index>=arr.length) {
			
			return;
			
		} else {
		
		if(!visited[index]) {
			currentList.add(arr[index]);
			visited[index]=true;
			findAllPartition(index+1,k,arr,currentList);
			visited[index]=false;
			currentList.remove(currentList.size()-1);
			findAllPartition(index+1,k,arr,currentList);
		}
		 else {
			findAllPartition(index+1,k,arr,currentList);
			
		}
			
		}
		
	}
	

	public void execute() {
		int[] arr=new int[] {1,3,4,3,1,1};
		int k=3;
		this.globalK=k;
		this.answer=new ArrayList<>();
		this.visited=new boolean[arr.length];
		findAllPartition(0,k,arr,new ArrayList<>());	
	}


	public static void main(String args[]) {
		
		MultiSetPartition multiSetPartition=new MultiSetPartition();
		multiSetPartition.execute();
		
	}

}
