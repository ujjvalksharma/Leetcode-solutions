/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    
    private void constructGraph(TreeNode root, HashMap<Integer,List<Integer>> graph, int parent) {
        
        if(root == null) {
            return;
        }
        
        constructGraph(root.left, graph, root.val);
        constructGraph(root.right, graph, root.val);
        
        if(!graph.containsKey(root.val)) {
            graph.put(root.val, new ArrayList<Integer>());
        }
        
        List<Integer> children = graph.get(root.val);
        
        if(parent != -1) {
            children.add(parent);
        }
        
        if(root.left != null) {
            children.add(root.left.val);
        }
        
        if(root.right != null) {
            children.add(root.right.val); 
        }
        
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        
    HashMap<Integer,List<Integer>> graph = new HashMap<Integer,List<Integer>>();
    Set<Integer> visited = new HashSet<Integer>();
    Queue<int[]> bfs = new LinkedList<int[]>();
    int source = target.val;
    List<Integer> result = new ArrayList<Integer>();
    
    constructGraph(root, graph, -1);
    //System.out.println("graph: "+graph);
    bfs.add(new int[]{source, 0});
    visited.add(source);
    while(!bfs.isEmpty()) {
        int[] node = bfs.poll();
        
        if(node[1] == k){
            result.add(node[0]);
            continue;
        }
        
        List<Integer> neighbours = graph.get(node[0]);
        
        for(int neighbour: neighbours) {
            if(!visited.contains(neighbour)) {
                visited.add(neighbour);
                bfs.add(new int[]{neighbour, node[1] + 1});
            }
        }
        
    }
        
    
    return result;
    

    }
}
