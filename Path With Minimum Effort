class Solution {
    
    class Edge {
        String source;
        String destination;
        int weight;
        public Edge(String source, String destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }
    }
    
    class Node {
        String nodeId;
        int distanceFromSource;
        public Node(String nodeId, int distanceFromSource) {
            this.nodeId = nodeId;
            this.distanceFromSource = distanceFromSource;
        }
        
    }
    
    public boolean isValid(int newX, int newY, int[][] heights) {
        if(newX < 0 || newY < 0 || newX >= heights.length || newY >= heights[0].length) {
            return false;
        }
        return true;
    }
    
    public String getKey(int x, int y) {
        return x + "," + y;
    }
    
    public int getWeight(int x1, int y1, int x2, int y2, int[][] heights) {
        return Math.abs(heights[x1][y1] - heights[x2][y2]);
    }
    
    public Map<String, Integer> getMinDistanceToAllNodesFromDikstra(String source, Map<String, List<Edge>> graph, int totalNodes) {
    
        Map<String, Integer> nodeToDistanceFromSource = new HashMap<>();
        PriorityQueue<Node> unSeenNodes = new PriorityQueue<Node>((a,b) -> a.distanceFromSource - b.distanceFromSource);
        for(String nodeId : graph.keySet()) {
            if(nodeId.equals(source)) {
                nodeToDistanceFromSource.put(nodeId, 0);
                unSeenNodes.add(new Node(nodeId, 0));
            } else {
                nodeToDistanceFromSource.put(nodeId, Integer.MAX_VALUE);
                unSeenNodes.add(new Node(nodeId, Integer.MAX_VALUE));
            }
        }
   //     System.out.println("nodeToDistanceFromSource: " + nodeToDistanceFromSource);
        while(!unSeenNodes.isEmpty()) {
            Node node = unSeenNodes.poll();
            if(node.distanceFromSource > nodeToDistanceFromSource.get(node.nodeId)) {
                continue;
            }
            List<Edge> neighbours = graph.get(node.nodeId);
            for(Edge neighbour : neighbours) {
                int currentDistance = nodeToDistanceFromSource.get(neighbour.destination);
              //  System.out.println("node.distanceFromSource: " + node.distanceFromSource + " neighbour.weight: " + neighbour.weight);
                int newDistance = Math.max(node.distanceFromSource, neighbour.weight);
                if(newDistance < currentDistance) {
                 //   System.out.println("newDistance: " + newDistance);
                    nodeToDistanceFromSource.put(neighbour.destination, newDistance);
                    unSeenNodes.add(new Node(neighbour.destination, newDistance));
                }
            }
        }
        return nodeToDistanceFromSource;
    }
    
    public void buildGraph(Map<String, List<Edge>> graph, int[][] heights) {
        
        int[][] directions = new int[][]{{-1, 0}, {0, -1}, {0, 1}, {1, 0}};
        for(int i = 0; i < heights.length; i++) {
            for(int j = 0; j < heights[0].length; j++) {
                String source = getKey(i, j);
                for(int[] direction : directions) {
                    int newX = i + direction[0];
                    int newY = j + direction[1];
                    if(isValid(newX, newY, heights)) {
                        String destination = getKey(newX, newY);
                        if(!graph.containsKey(source)) {
                            graph.put(source, new ArrayList<>());
                        }
                        int weight = getWeight(i, j, newX, newY, heights);
                        graph.get(source).add(new Edge(source, destination, weight));
                        
                    }
                }
                
            }
        }
    }
    
    public int minimumEffortPath(int[][] heights) {
        
        if(heights.length == 1 && heights[0].length == 1) {
            return 0;
        }
       
        Map<String,List<Edge>> graph = new HashMap<>();
        buildGraph(graph, heights);
        String source = getKey(0,0);
        Map<String, Integer> nodeToDistanceFromSource = 
            getMinDistanceToAllNodesFromDikstra(source, graph, heights.length * heights[0].length);
        String destination = getKey(heights.length - 1, heights[0].length - 1);
        return nodeToDistanceFromSource.get(destination);
        
        
        
    }
}




class Solution {
    public int minimumEffortPath(int[][] heights) {
        
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b)->a[2]-b[2]);
        pq.add(new int[]{0,0,0});
        int[][] minimumEffortToReachNodes = new int[heights.length][heights[0].length];
        int minimumEffort = Integer.MAX_VALUE;
        int[][] directions = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};
        
        for(int[] minimumEffortToReachNode : minimumEffortToReachNodes){
            Arrays.fill(minimumEffortToReachNode, Integer.MAX_VALUE);
        }
        
        while(!pq.isEmpty()) {
            int[] node = pq.poll();
            int x = node[0];
            int y = node[1];
            int effort = node[2];
            //System.out.println("current node: "+Arrays.toString(node));
            if(x == heights.length -1 && y == heights[0].length-1) {
                minimumEffort = Math.min(minimumEffort, effort);
                continue;
            }
            
            if(effort >= minimumEffortToReachNodes[x][y]){
                continue;
            }
            
            minimumEffortToReachNodes[x][y] = effort;
            
             for(int[] direction : directions){
                
                int newX = direction[0] + x;
                int newY = direction[1] + y;
                
                if(newX >= 0 && newX < heights.length && newY>= 0 && newY < heights[0].length) {
                   
                    int newDistance = Math.abs(heights[newX][newY] - heights[x][y]);
                    newDistance  = Math.max(newDistance, effort);
                    pq.add(new int[]{newX,newY,newDistance});
                    
                }
            
        }
        
    }
                
        return minimumEffort;
        
    }
}
