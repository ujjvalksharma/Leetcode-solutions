//recursion to take out element 1 by 1
class Solution {
    
    int minDiff = Integer.MAX_VALUE;
    
    public void findMinDiff(int[] nums, int start, int end, int totalRemoval) {
        
        if(totalRemoval >= 4) {
            return;
        }
        
        if(start > end) {
            return;
        }
        
        if(start == end) {
            minDiff = 0;
            return;
        }
        
        minDiff = Math.min(minDiff, nums[end] - nums[start]);
        
        findMinDiff(nums, start + 1, end, totalRemoval + 1);
        findMinDiff(nums, start, end - 1, totalRemoval + 1);
        
    }
    public int minDifference(int[] nums) {
        
        Arrays.sort(nums);
        findMinDiff(nums, 0, nums.length -1, 0);
        return minDiff;
        
    }
}






//make top 3 larger values equal to top 3 samller values.
//you will have rougly 9 combination of answer
class Solution {
    public int minDifference(int[] nums) {
        if(nums.length<=4){
            return 0;
        }
          Arrays.sort(nums);
        int n=nums.length;
        int op1= nums[n-4]-nums[0];
        int opt2=nums[n-3]-nums[1];
        int opt3=nums[n-2]-nums[2];
        int opt4=nums[n-1]-nums[3];
        
        return Math.min(op1,Math.min(opt2,Math.min(opt3,opt4)));
    }
}
//[1,5,0,10,14]
// 0,1,0,0,0

//[6,6,0,1,1,4,6]
//4,4,4,4,6,6,6

//[1,5,6,14,15]
//1,5,6,14,15
//
