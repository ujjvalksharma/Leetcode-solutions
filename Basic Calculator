class Solution {
     int index = 0;
     int totalSum = 0;
    // public String removeSpaces(String s) {
    //     StringBuilder sb = new StringBuilder("");
    //     for(int i = 0; i < s.length(); i++) {
    //         if(s.charAt(i) == ' ') {
    //             continue;
    //         }
    //         sb.append(s.charAt(i));
    //     }
    //     return sb.toString();
    // }

    public void calculateHelper(String s, int globalOperater) {
        if(index >= s.length()) {
            return;
        }
        int currentOperator = 1;
        StringBuilder currentNumber = new StringBuilder("");
        while(index < s.length()) {

            if(s.charAt(index) == ' ') {
                index++;
                continue;
            }
            
            if(Character.isDigit(s.charAt(index))) {
                currentNumber.append(s.charAt(index));
            } else {
                if(currentNumber.length() > 0) {
                    int num = Integer.parseInt(currentNumber.toString())*currentOperator*globalOperater;
            System.out.println("num: " + num + " globalOperater: " + globalOperater + " currentOperator: " + currentOperator);
                    totalSum += num;
                    currentNumber.setLength(0);

                }

                if(s.charAt(index) == '+') {
                currentOperator = 1;
                } else if(s.charAt(index) == '-') {
                currentOperator = -1;
                } else if(s.charAt(index) == '(') {
                    index++; //skip opening
                    calculateHelper(s, currentOperator*globalOperater);
                } else {
                    return;
                }

            }
            index++;

        }
        if(currentNumber.length() > 0) {
            int num = Integer.parseInt(currentNumber.toString())*currentOperator*globalOperater;
            System.out.println("num: " + num + " globalOperater: " + globalOperater + " currentOperator: " + currentOperator);
            totalSum += num;
            currentNumber.setLength(0);

        }
    }
    public int calculate(String s) {
       // s = removeSpaces(s);
        calculateHelper(s, 1);
        return totalSum;
    }
}

/*


*/

class Solution {
    public int calculate(String s) {

        Stack<Integer> stack = new Stack<Integer>();
        int operand = 0;
        int result = 0; // For the on-going result
        int sign = 1;  // 1 means positive, -1 means negative

        for (int i = 0; i < s.length(); i++) {

            char ch = s.charAt(i);
            if (Character.isDigit(ch)) {

                // Forming operand, since it could be more than one digit
                operand = 10 * operand + (int) (ch - '0');

            } else if (ch == '+') {

                // Evaluate the expression to the left,
                // with result, sign, operand
                result += sign * operand;

                // Save the recently encountered '+' sign
                sign = 1;

                // Reset operand
                operand = 0;

            } else if (ch == '-') {

                result += sign * operand;
                sign = -1;
                operand = 0;

            } else if (ch == '(') {

                // Push the result and sign on to the stack, for later
                // We push the result first, then sign
                stack.push(result);
                stack.push(sign);

                // Reset operand and result, as if new evaluation begins for the new sub-expression
                sign = 1;
                result = 0;

            } else if (ch == ')') {

                // Evaluate the expression to the left
                // with result, sign and operand
                result += sign * operand;

                // ')' marks end of expression within a set of parenthesis
                // Its result is multiplied with sign on top of stack
                // as stack.pop() is the sign before the parenthesis
                result *= stack.pop();

                // Then add to the next operand on the top.
                // as stack.pop() is the result calculated before this parenthesis
                // (operand on stack) + (sign on stack * (result from parenthesis))
                result += stack.pop();

                // Reset the operand
                operand = 0;
            }
        }
        return result + (sign * operand);
    }
}
