/*
Solution using binary search:

We find various length using binary search and make a hashset to store the toString of all the subarray of that length, and veridy if subrray is present in the other array 
*/
class Solution {
    public boolean check(int length, int[] A, int[] B) {
        Set<String> seen = new HashSet();
        for (int i = 0; i + length <= A.length; ++i) { // store all subrray
            seen.add(Arrays.toString(Arrays.copyOfRange(A, i, i+length)));
        }
        for (int j = 0; j + length <= B.length; ++j) { //verify subrray in other array
            if (seen.contains(Arrays.toString(Arrays.copyOfRange(B, j, j+length)))) {
                return true;
            }
        }
        return false;
    }

    public int findLength(int[] A, int[] B) {
        
        // binary search to find various lengths
        int lo = 0;
        int hi = Math.min(A.length, B.length) + 1;
        int maxLength=0;
        while (lo <= hi) {
            int mi = (lo + hi) / 2;
            if (check(mi, A, B)){
                lo = mi + 1;
                maxLength=Math.max(maxLength,mi);
            } 
            else{
                hi = mi-1;
            } 
        }
        return maxLength;
    }
}

/*
memorization+ recursion
In this question, we increment both indexs if we see a match else we increment one by one and we store a global max length variable as for substring we need to have consecutive same characters in both arry/string.We add one when there is match we will return 0. In memory we will store index of A AND B as it will affect the sub arrays we are looking at and to avoid over iteration over the same sub-tree.

hasmap is giving TLE, so use 2d matrix for memory
*/
/*
class Solution {

public int maxGlobalLength = 0;
 int[][] memo;
//HashMap<String,Integer> hmIndexOfAAndBToLen=new HashMap<>();
    public int findLength(int[] A, int[] B) {

          memo = new int[A.length][B.length];

        for (int row = 0; row < memo.length; row++) {
            Arrays.fill(memo[row], -1);
        }
        
        findLength(0, 0, A, B);
        return maxGlobalLength;
    }

    private int findLength(int i, int j, int[] A, int[] B) {
        if (i >= A.length || j >= B.length)
            return 0;

        int maxLength = 0;
    //    String key=i+"-"+j;
//if(hmIndexOfAAndBToLen.containsKey(key)){
 //   return hmIndexOfAAndBToLen.get(key);
//}
         if (memo[i][j] != -1){
             return memo[i][j];
         } 
        if (A[i] == B[j]) {
            maxLength = findLength(i + 1, j + 1, A, B) + 1;
            maxGlobalLength = Math.max(maxGlobalLength, maxLength);
        }

        findLength(i + 1, j, A, B);
        findLength(i, j + 1, A, B);
        memo[i][j] = maxLength;
    //    hmIndexOfAAndBToLen.put(key,maxLength);
        return maxLength;
    }
}
*/
/*
// recursion
class Solution {

public int val = 0;

HashMap<String,Integer> hmIndexOfAAndBToLen=new HashMap<>();
    public int findLength(int[] A, int[] B) {

        findLength(0, 0, A, B);
        return val;
    }

    private int findLength(int i, int j, int[] A, int[] B) {
        if (i >= A.length || j >= B.length)
            return 0;

        int maxLength = 0;
        String key=i+"-"+j;
if(hmIndexOfAAndBToLen.containsKey(key)){
    return hmIndexOfAAndBToLen.get(key);
}
        
        if (A[i] == B[j]) {
            maxLength = findLength(i + 1, j + 1, A, B) + 1;
            val = Math.max(val, maxLength);
        }

        findLength(i + 1, j, A, B);
        findLength(i, j + 1, A, B);
        hmIndexOfAAndBToLen.put(key,maxLength);
        return maxLength;
    }
}

*/
