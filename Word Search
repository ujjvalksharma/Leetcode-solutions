//simple DFS
class Solution {
    
    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};
    
    public boolean isWordPresent(char[][] board, String word, int x, int y, int index, Set<String> visited) {
        
        String key = x+","+y;
        
        if(index >= word.length()) {
            return true;
        }
        
        if(x < 0 || y < 0 ||  x >= board.length || y >= board[0].length || visited.contains(key) || board[x][y] != word.charAt(index)) {
            return false;
        }
        
        visited.add(key);
        
        boolean result = false;
        
        for(int[] dir : dirs) {
            int newX = x + dir[0];
            int newY = y + dir[1];
            result = result | isWordPresent(board, word, newX, newY, index + 1, visited);
        }
        
        visited.remove(key);
        
        return result;
    }
    
    public boolean exist(char[][] board, String word) {
        
        for(int i=0; i<board.length; i++) {
            
            for(int j=0; j<board[0].length; j++) {
                  
                if(isWordPresent(board, word, i, j, 0, new HashSet<>())){
                    return true;
                }
            }
        }
        
        return false;
    }
}
