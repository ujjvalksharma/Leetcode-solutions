class Solution {
    
    int[] parent;
    class Edje{
        int node1;
        int node2;
        int cost;
        Edje(int node1, int node2, int cost){
            this.node1=node1;
            this.node2=node2;
            this.cost=cost;
        }
        
        public String toString(){
            return "node1: "+node1+" node2: "+node2+" cost: "+cost;
        }
        
    }
    
    public int getDistance(int[] point1,int[] point2 ){
        return Math.abs(point1[0]-point2[0])+Math.abs(point1[1]-point2[1]);
    }
    
  /*  public int findParent(int index){
        if(parent[index]==index){
            return index;
        }
        
        return parent[index];
    }*/
    
    public int findParent(int node) {
        int root = node;
        while (root != parent[root]) {
            root = parent[root];
        }
        
        while (node != root) {
            int next = parent[node];
            parent[node] = root;
            node = next;
        }
        
        return root;
    }
    
    public boolean isCyclePresent(Edje edge){
        
        int start=edge.node1;
        int end=edge.node2;
        
        int parentOfStart=findParent(start);
        int parentOfEnd=findParent(end);
        
        if(parentOfStart==parentOfEnd){
            return true;
        }
        
        parent[parentOfEnd]=parentOfStart;
        return false;
    }
    public int minCostConnectPoints(int[][] points) {
        
        this.parent=new int[points.length];
        PriorityQueue<Edje> pq=new PriorityQueue<Edje>((e1,e2)-> e1.cost-e2.cost);
        int totalCost=0;
        for(int i=0;i<points.length;i++){
             parent[i] = i;
            for(int j=i+1;j<points.length;j++){
            pq.add(new Edje(i,j,getDistance(points[i],points[j])));
        }
            
        }
        
        while(!pq.isEmpty()){
            
            Edje currentEdje=pq.poll();
          //  System.out.println(currentEdje);
            if(!isCyclePresent(currentEdje)){
               totalCost+= currentEdje.cost;
            }
        }
        
        return totalCost;
    }
}
