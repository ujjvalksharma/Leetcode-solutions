class Solution {
    class Node {
        char c;
        Map<Character, Node> children;
        boolean doesWordEnd;
        String endWord;
        public Node(char c) {
            this.c = c;
            this.doesWordEnd = false;
            this.children = new HashMap<>();
            this.endWord = null;
        }
    }
    int[][] directions = new int[][]{{0,1},{1,0},{-1,0},{0,-1}};
    public Node constructTrie(List<String> words) {
        Node head = new Node('/');
        for(String word :  words) {
            Node tempHead = head;
            for(int i = 0; i < word.length(); i++) {
                if(!tempHead.children.containsKey(word.charAt(i))) {
                    tempHead.children.put(word.charAt(i), new Node(word.charAt(i)));
                }
                tempHead = tempHead.children.get(word.charAt(i));
            }
            tempHead.doesWordEnd = true;
            tempHead.endWord = word;

        }
        return head;
    }
    public List<String> findWords(char[][] board, String[] words) {
        Set<String> result = new HashSet<>();
        Node trieHead = constructTrie(Arrays.stream(words).toList());
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                if(trieHead.children.containsKey(board[i][j])) {
                    dfs(board, i, j, trieHead.children.get(board[i][j]), result, trieHead);
                }
            }
        }
        return new ArrayList<>(result);
    }

    public void dfs(char[][] board, int x, int y, Node node, Set<String> result, Node parent) {

        char currentChar = board[x][y];
        board[x][y] = '$';
        if(node.doesWordEnd) {
            result.add(node.endWord);
            if(node.children.size() == 0) {
                parent.children.remove(currentChar);
            }
        }

        for(int[] direction : directions) {
            int newX = direction[0] + x;
            int newY = direction[1] + y;
            if(!isValid(newX, newY, board, node)) {
                continue;
            }
            dfs(board, newX, newY, node.children.get(board[newX][newY]), result, node);
        }

        if(node.children.size() == 0) {
           node.children.remove(board[x][y]); 
        }

        board[x][y] = currentChar;

    }

    public boolean isValid(int x, int y, char[][] board, Node node) {
        if(x < 0 || y < 0 || x >= board.length || y >= board[0].length) {
            return false;
        }

        if(!node.children.containsKey(board[x][y]) || board[x][y] == '#') {
            return false;
        }

        return true;

    }
}

/*
Approach1 :
for each word in words perform DFS on board

Approach2 :
for each word in words perform DFS on (row,col) where first character is present and this can be found from hasmap

Approach3:
DFS + trie + puring leaf nodes


*/



/*
Make a tire data strucutre of all the words,
loop through each i,j in board and then perform a search in trie and board parallel Node.isLeaf is true. Insert in set 
loop through set and put it in result



*/
class Solution {
    
    class Node {
        
        Node[] children;
        boolean isLeaf;
        
        public Node() {
            
            this.children = new Node[26];
            this.isLeaf = false;
            
        }
        
    }
    
    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};
    
    public void insert(String word, Node root) {
        
        for(int i=0; i<word.length(); i++) {
            
            if(root.children[word.charAt(i) - 'a'] == null) {
                root.children[word.charAt(i) - 'a'] = new Node();
            }
            root = root.children[word.charAt(i) - 'a'];
        }
        
        root.isLeaf = true;
        
    }
    
    public void findWordInTrie(Node root, char[][] board, int i, int j, StringBuilder sb, Set<String> setOfResult, boolean[][] visited) {
        
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || visited[i][j] == true || root.children[board[i][j] - 'a'] == null) {
            return;
        }
        
        root = root.children[board[i][j] - 'a'];
        sb.append(board[i][j]);
        visited[i][j] = true;
        
        if(root.isLeaf) {
            setOfResult.add(sb.toString());
        }
        
        for(int[] dir : dirs) {
            
            int newX = dir[0] + i;
            int newY = dir[1] + j;
            
            findWordInTrie(root, board, newX, newY, sb, setOfResult, visited);
        }
        
        visited[i][j] = false;
        sb.setLength(sb.length() - 1);
        
    }
    public List<String> findWords(char[][] board, String[] words) {
        
        Node root = new Node();
        
        for(String word : words) {
            insert(word, root);
        }
        
        Set<String> setOfResult = new HashSet<>();
        List<String> result = new ArrayList<>();
        
        for(int i=0; i<board.length; i++) {
            for(int j=0; j<board[0].length; j++) {
                
                boolean[][] visited = new boolean[board.length][board[0].length];
                findWordInTrie(root, board, i, j, new StringBuilder(""), setOfResult, visited);
            }
        }
        
        for(String word: setOfResult) {
            result.add(word);
        }
        
        return result;
        
    }
}
