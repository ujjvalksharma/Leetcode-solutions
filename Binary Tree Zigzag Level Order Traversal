/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        
        boolean isLeftToRight = true;
        Queue<TreeNode> levelOrder = new LinkedList<TreeNode>();
        List<List<Integer>> result = new ArrayList<>();
        
        if(root != null) {
            levelOrder.add(root);
        }
        
        while(!levelOrder.isEmpty()) {
            
            int size = levelOrder.size();
            List<Integer> list = new ArrayList<>();
            
            while(size > 0) {
                
                TreeNode currentNode = levelOrder.poll();
                list.add(currentNode.val);
                
                if(currentNode.left != null) {
                    levelOrder.add(currentNode.left);
                }
                
                if(currentNode.right != null) {
                    levelOrder.add(currentNode.right);
                }
                
                size--;
            }
            
            if(!isLeftToRight) {
                Collections.reverse(list); 
            }
            
            result.add(list);
            isLeftToRight = !isLeftToRight;
        }
        
        return result;
        
    }
}
