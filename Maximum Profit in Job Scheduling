/*
1) sort jobs
2) pick and unpick job.  Pick next job based on binary search

*/
class Solution {
    class Job {
        int startTime;
        int endTime;
        int profit;
        public Job(int startTime, int endTime, int profit) {
            this.startTime = startTime;
            this.endTime = endTime;
            this.profit = profit;
        }

        @Override
        public String toString() {
            return "startTime: " + startTime + " endTime: " + endTime + " profit: " + profit;
        }
    }
    Map<Integer,Integer> cache = new HashMap<>();
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {

        Job[] jobs = new Job[startTime.length];
        for(int i = 0; i < startTime.length; i++) {
            jobs[i] = new Job(startTime[i], endTime[i], profit[i]);
        }
        Arrays.sort(jobs, (a,b) -> {
            if(a.startTime == b.startTime) {
                return a.endTime - b.endTime;
            }
            return a.startTime - b.startTime;
        });

        return finMaxProfit(jobs, 0);
    }

    public int finMaxProfit(Job[] jobs, int index) {
        if(index >= jobs.length) {
            return 0;
        }

        if(cache.containsKey(index)) {
            return cache.get(index);
        }
        //skip job
        int totalProfit1 = finMaxProfit(jobs, index + 1);
        //pick the job
        Job currentJob = jobs[index];
        int totalProfit2 = currentJob.profit;
        //instead of forloop, do binary search
        // for(int i = index + 1; i < jobs.length; i++) {
        //     if(jobs[i].startTime >= currentJob.endTime) {
        //         totalProfit2 += finMaxProfit(jobs, i + 1);
        //     }
        // }
        int nextJobIndex = binarysearch(jobs, currentJob, index + 1, jobs.length - 1);
        totalProfit2 += finMaxProfit(jobs, nextJobIndex);
        int maxJob = Math.max(totalProfit1, totalProfit2);
        cache.put(index, maxJob);
        return maxJob;
    }

    public int binarysearch(Job[] jobs, Job currentJob, int start, int end) {
        int index = jobs.length;
        while(start <= end) {
            int mid = start + (end - start)/2;
            if(jobs[mid].startTime >= currentJob.endTime) {
                index = Math.min(index, mid);
                end = mid - 1;
            } else {
                start = mid + 1;
            }

        }
        return index;

    }
}
/*

[1, 2,  3,  4,  6]
[3, 5,  10, 6,  9]
[20,20, 100,70, 60]


*/


class Solution {
    
        class Job {
       public int start;
      public  int end;
      public  int profit;
        
        public Job(int start, int end, int profit) {
            this.start = start;
            this.end = end;
            this.profit = profit;
        }
        
       
    }
    
    HashMap<Integer,Integer> hmIndexToProfit=new HashMap<>();

    public int jobSchedulingHelper(int index,Job[] jobs){
        
        if(index>=jobs.length){
            return 0;
        }
        
        
        if(hmIndexToProfit.containsKey(index)){
            return hmIndexToProfit.get(index);
        }
        
        
          Job indexJob = jobs[index];
        int nextIndex = Arrays.binarySearch(jobs, new Job(indexJob.end, 0, 0), (a, b) -> (a.start == b.start) ? a.end - b.end : a.start - b.start);
        if(nextIndex < 0) {
            nextIndex = -nextIndex-1;
        }
       int includeCurrentIndex=indexJob.profit + jobSchedulingHelper(nextIndex,jobs);
       int excludeCurrentIndex= jobSchedulingHelper(index+1,jobs);
        
          int maxProfit=Math.max(includeCurrentIndex,excludeCurrentIndex);
        
                hmIndexToProfit.put(index,maxProfit);
        
        return maxProfit;
    }
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        

        Job[] jobs = new Job[startTime.length];
        for(int i = 0; i < startTime.length; i++) {
            jobs[i] = new Job(startTime[i], endTime[i], profit[i]);
        }

        Arrays.sort(jobs, (a, b) -> (a.start == b.start) ? a.end - b.end : a.start - b.start);
        
        return jobSchedulingHelper(0,jobs);
    }
}/*
This is a simple recursion + meorization in which we iterate as we see a non-over lapping time and consider it in profit and we take a case of exluding in profit then we return 0 if we reach end as no profit is there and we need to finish recursion. in memory we store the index along with currenttime because we be at an index but different current start and end time as that may effect the profit in future because for consider a index we check if times don't overlap .

This solution will 
*/
/*class Solution {
    
        class Job {
       public int start;
      public  int end;
      public  int profit;
        
        public Job(int start, int end, int profit) {
            this.start = start;
            this.end = end;
            this.profit = profit;
        }
        
       
    }
    
    HashMap<String,Integer> hmIndexToProfit=new HashMap<>();

    public int jobSchedulingHelper(int index,int[] currentTime,Job[] arr){
        
        if(index>=arr.length){
            return 0;
        }
        
        int includeCurrentIndex=0;
        
        if(hmIndexToProfit.containsKey(index+"-"+currentTime[0]+"-"+currentTime[1])){
            return hmIndexToProfit.get(index+"-"+currentTime[0]+"-"+currentTime[1]);
        }
        
        if(arr[index].start>=currentTime[1]){
        includeCurrentIndex=jobSchedulingHelper(index+1,
                                      new int[]{Math.min(currentTime[0],arr[index].start),
                                                Math.max(currentTime[1],arr[index].end)
                                                },
                                                jobs)+arr[index].profit;
        }
        
        int excludeCurrentIndex=jobSchedulingHelper(index+1,
                                                     new int[]{currentTime[0],currentTime[1]},
                                                     jobs);
        
        int maxProfit=Math.max(includeCurrentIndex,excludeCurrentIndex);
        hmIndexToProfit.put(index+"-"+currentTime[0]+"-"+currentTime[1],maxProfit);
        return maxProfit;
        
    }
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
           int n = startTime.length;
        Job[] jobs = new Job[n];
        for(int i = 0; i < n; i++) {
            jobs[i] = new Job(startTime[i], endTime[i], profit[i]);
        }
        // sorted in reverse
        Arrays.sort(arr, (a, b) -> (a.start == b.start) ? a.end - b.end : a.start - b.start);
        
        return jobSchedulingHelper(0,new int[]{0,0},jobs);
    }
}
*/
/*
//recursion
class Solution {
    
        class JobDetail {
       public int start;
      public  int end;
      public  int profit;
        
        public JobDetail(int start, int end, int profit) {
            this.start = start;
            this.end = end;
            this.profit = profit;
        }
        
        public String toString() {
            return "[start = " + this.start + " end = " + this.end + " profit = " + this.profit + "]";
        }
    }
    

    public int jobSchedulingHelper(int index,int[] currentTime,JobDetail[] arr){
        
        if(index>=arr.length){
            return 0;
        }
        
        int includeCurrentIndex=0;
        
      
        
        if(arr[index].start>=currentTime[1]){
        includeCurrentIndex=jobSchedulingHelper(index+1,
                                      new int[]{Math.min(currentTime[0],arr[index].start),
                                                Math.max(currentTime[1],arr[index].end)
                                                },
                                                arr)+arr[index].profit;
        }
        
        int excludeCurrentIndex=jobSchedulingHelper(index+1,
                                                     new int[]{currentTime[0],currentTime[1]},
                                                     arr);
        
        int maxProfit=Math.max(includeCurrentIndex,excludeCurrentIndex);
        return maxProfit;
        
    }
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        
           int n = startTime.length;
        JobDetail[] arr = new JobDetail[n];
        for(int i = 0; i < n; i++) {
            arr[i] = new JobDetail(startTime[i], endTime[i], profit[i]);
        }
        // sorted in reverse
        Arrays.sort(arr, (a, b) -> (a.start == b.start) ? a.end - b.end : a.start - b.start);
        
        return jobSchedulingHelper(0,new int[]{0,0},arr);
    }
}

*/
