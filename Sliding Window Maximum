class Solution {
    
    class Num {
        
        public int value;
        public int index;
        
        public Num(int value, int index) {
            this.value = value;
            this.index = index;
        }
        
        @Override
        public String toString() {
            return ""+value;
        }
        
    }
    
    public void filterDequeuByIndex(Deque<Num> deque, int index) {
        
        while(!deque.isEmpty() && deque.peekLast().index < index) {
            deque.pollLast();
        }
        
        while(!deque.isEmpty() && deque.peekFirst().index < index) {
            deque.pollFirst();
        }
        
    }
    
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        List<Integer> tempResult = new ArrayList<Integer>();
        Deque<Num> deque = new ArrayDeque<Num>();
        
        for(int i=0; i<nums.length; i++) {
            
            if(i+1 > k){
                filterDequeuByIndex(deque, i-k+1);
            }
            
            if(deque.isEmpty()) {
                deque.addLast(new Num(nums[i], i));
            } else {
                
                if(nums[i] > deque.peekLast().value) {
                    
                    while(!deque.isEmpty() && deque.peekLast().value <= nums[i]) {
                        deque.pollLast();
                    }
                    
                    deque.addLast(new Num(nums[i], i));
                } else {
                    
                    while(!deque.isEmpty() && deque.peekFirst().value <= nums[i]) {
                        deque.pollFirst();
                    }
                    
                    deque.addFirst(new Num(nums[i], i));
                }
            }
            
           // System.out.println("deque: "+deque);
            
            if(i+1 >= k) {
                tempResult.add(deque.peekLast().value);  
            }
            
        }
        
        int[] result = new int[tempResult.size()];
        
        for(int i=0; i<tempResult.size(); i++) {
            result[i] = tempResult.get(i);
        }
        
        return result;
    }
}

/*

 [1,3,-1,-3,5,3,6,7]

*/

class Solution {
    
    class Node {
        int index;
        int num;
        
        public Node(int index, int num) {
            this.index = index;
            this.num = num;
        }
        
        @Override
        public String toString() {
            return ""+num;
        }
    }
    
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        Deque<Node> deque = new ArrayDeque<Node>();
        List<Integer> tempResult = new ArrayList<Integer>();
        
        for(int i=0; i<nums.length; i++) {
            
            if(i+1 >= k) {
                int minIndexAllowed = i - k +1;
                
                while(!deque.isEmpty() && deque.peekLast().index < minIndexAllowed) {
                    deque.removeLast();
                }
                
                while(!deque.isEmpty() && deque.peekFirst().index < minIndexAllowed) {
                    deque.removeFirst();
                }
            }
            
            if(deque.isEmpty()) {
                deque.addLast(new Node(i,nums[i]));
            } else {
                if(nums[i] >= deque.peekLast().num) {
                    
                    while(!deque.isEmpty() && nums[i] > deque.peekLast().num) {
                        deque.removeLast();
                    }
                    deque.addLast(new Node(i,nums[i]));
                } else {
                    
                    while(!deque.isEmpty() && nums[i] > deque.peekFirst().num) {
                        deque.removeFirst();
                    }
                    deque.addFirst(new Node(i,nums[i]));
            }
        }
            //System.out.println("deque: "+deque);
            if(i+1 >= k) {
                tempResult.add(deque.peekLast().num);
               // System.out.println("I am here with answer: "+tempResult);
            }
            
            
     }
        
        int[] result = new int[tempResult.size()];
        
        for(int i=0; i<tempResult.size(); i++) {
            result[i] = tempResult.get(i);
        }
        
        return result;
        
    }
}
//my code
class Solution {
    
    class Element{
        
        int index;
        int value;
        
        public Element(int index, int value){
            this.index=index;
            this.value=value;
        }
        
        @Override
        public String toString(){
          //  return "index: "+index+" value: "+value;
            return ""+value;
        }
    }
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        List<Integer> tempAnswer=new ArrayList<Integer>();
        
        Deque<Element> deque = new LinkedList<Element>();
        
        int start=0;
        int end=0;
        
        while(end<nums.length){
            
            if(end-start+1==k){
                
                removeElementFromStartAndEndLessThanIndex(start, deque);

            }    
            
            if(!deque.isEmpty()){
                
                if(nums[end]>=deque.peekLast().value){
                    
                    removeElementsFromLastLessThanValue(nums[end], deque);
                    deque.addLast(new Element(end,nums[end]));
                    
                }else {
                    removeElementsFromFirstLessThanValue(nums[end], deque);
                      deque.addFirst(new Element(end,nums[end]));
                }
                
            }else {
                  deque.addLast(new Element(end,nums[end]));
            } 
            
              if(end-start+1==k){
                tempAnswer.add(deque.peekLast().value);
                start++;
            }  
            
          
     //    System.out.println("deque: "+deque);
            end++;
        }
        
        int[] answer=new int[tempAnswer.size()];
        
        for(int i=0;i<tempAnswer.size();i++){
            answer[i]=tempAnswer.get(i);
        }
        
        return answer;
    }
    
    public void removeElementFromStartAndEndLessThanIndex(int index, Deque<Element> deque){
        
        while(!deque.isEmpty()&&deque.peekFirst().index<index){
            deque.pollFirst();
        }
        
          while(!deque.isEmpty()&&deque.peekLast().index<index){
            deque.pollLast();
        }
    }
    
    
      public void removeElementsFromLastLessThanValue(int value, Deque<Element> deque){
        
        while(!deque.isEmpty()&&deque.peekLast().value<value){
            deque.pollLast();
        }
    }
    
    
        public void removeElementsFromFirstLessThanValue(int value, Deque<Element> deque){
        
        while(!deque.isEmpty()&&deque.peekFirst().value<value){
            deque.pollFirst();
        }
    }
    
}



class Solution {
    
    class Node{
        int val;
        int index;
        Node(int val, int index){
            this.val=val;
            this.index=index;
        }
        
    }
    
    /*
    
    The basic Idea to usea ArrayDequeue as you can remove element from front and back in O(1). The logic behind inserting is that if we see can up coming element then we remove from right to left as we know that element is going to be in range and there is no point of keeping elements from the left. and while getting the max element remove element from left if we index outdated and we know the left most element must be highest element as we were maintaing a increasing order.
    
    */
    public int[] maxSlidingWindow(int[] nums, int k) {
        
        Deque<Node> dq = new ArrayDeque<Node>();
        int[] ans=new int[nums.length-k+1];
        int totalVisitedElements=0;
        int indexOfAns=0;
        
        for(int i=0;i<nums.length;i++){
            
            totalVisitedElements++;
            
            while(!dq.isEmpty()&&dq.peekLast().val<=nums[i]){
                dq.pollLast();
            }
            
            dq.addLast(new Node(nums[i],i));
            
            if(totalVisitedElements==k){
             
                  while(!dq.isEmpty()&&dq.peekFirst().index<Math.abs(k-1-i)){
                  dq.pollFirst();
               }
                
                ans[indexOfAns]=dq.peekFirst().val;
                totalVisitedElements--;
                indexOfAns++;
            }
            
        }
        
        return ans;
        
    }
}
/*
Solution2: 
We can keep inserting element in a priorityQueue (Max heap) and element would be num and its index. and pop max element from heap when the subarray size is K, now we are worried that we might get the max element from an invalid index as we should discard index before subarray of k size,so for getting valid index, when we get max element and we check its index. if it is invalid, we keep poping from the heap till we get a valid index with max value.
Time complex: NlogN

*/

/*
Solution1 using TreeMap:
In this solution, we take an array and insert elements into treemap one by one, since we know treemap has sorted elements, I can find the max element using tm.lastEntry().getKey() and we know that size of subarray is k+1 we will decrement value of the value at currentindex-k and remove the element if that element count is 0.
Time complex: NlogN
*/
/*
class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        //(a,b)->b-a
        TreeMap<Integer,Integer> tm=new TreeMap<>();
          int [] output = new int[nums.length - k + 1];
        int outputIndex=0;
        for(int i=0;i<nums.length;i++){
            
            if(i+1-k>0){ // size of subarray is k+1,so we should remove element.
                
                int removalIndex=i-k;
                int numAtRemovalIndex=nums[removalIndex];
                
                if(tm.containsKey(numAtRemovalIndex)){
                    tm.put(numAtRemovalIndex,tm.get(numAtRemovalIndex)-1);
                    
                    if(tm.get(numAtRemovalIndex)<=0){ //remove element from treemap if it count is <=0
                        tm.remove(numAtRemovalIndex);
                    }  
                }
                
            }
             
               tm.put(nums[i],tm.getOrDefault(nums[i],0)+1);
             if(i+1-k>=0){
               output[outputIndex]= tm.lastEntry().getKey();
                outputIndex++;
              }
        }
        return output;
        
    }
}
*/


class Solution {
    
    class Element{
        
        int index;
        int value;
        Element(int index, int value){
            this.index=index;
            this.value=value;
        }
        
        @Override
        public String toString(){
            return ""+this.value;
        }
        
    }
    public int[] maxSlidingWindow(int[] nums, int k) {
        
         Deque<Element> deque= new LinkedList<Element>();
        int[] ans=new int[nums.length-k+1];
        
        int start=0;
        int end=0;
        int i=0;
        while(end<nums.length){
            
            
            while(!deque.isEmpty()&&deque.peekFirst().index<start){
                    deque.removeFirst();
                }
            
            
             while(!deque.isEmpty()&&deque.peekLast().value<nums[end]){
                    deque.removeLast();
                }
            deque.addLast(new Element(end,nums[end]));
            
                if(end-start+1==k){
                ans[i]=deque.peekFirst().value;
                start++;
                i++;
            }
            
          //  System.out.println("deque: "+deque+" end:"+end);
            end++;
          
        }
        
        
        return ans;
    }
}
