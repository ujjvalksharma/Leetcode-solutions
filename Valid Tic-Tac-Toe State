/*There are two things you need to take care of for this question:
The first one is the number of X and the number of O. Since the X is placed first, thus the number of X should be either same as O or larger than 1, otherwise it is not valid.
The second condition is who is winning, we can check rows, cols and diagonals for that. There could not be two winners at the time and when X is winning, the number of X must be larger than the number of Y with 1. if winner is O, the number of O must be the same as X.
*/
//https://www.youtube.com/watch?v=RqOFx7Waehc
class Solution {
    public boolean validTicTacToe(String[] board) {
        char[][] matrix = new char[3][3];
        for (int i = 0; i < 3; i++) {
            matrix[i] = board[i].toCharArray();
        }
        int countX = 0, countO = 0;
        int[] rows = {0, 0, 0};
        int[] cols = {0, 0, 0};
        int[] dia = {0, 0};
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (matrix[i][j] == 'X') {
                    countX++;
                    rows[i]++;
                    cols[j]++;
                    if (i == j) dia[0]++;
                    if (i + j == 2) dia[1]++;
                } else if (matrix[i][j] == 'O') {
                    countO++;
                    rows[i]--;
                    cols[j]--;
                    if (i == j) dia[0]--;
                    if (i + j == 2) dia[1]--;
                }
            }
        }
		// check the difference between the number of X and the number of O
        int diff = countX - countO;
        if (diff < 0 || diff >= 2) return false;
		// check the winning condition
        boolean winX = false;
        boolean winO = false;
        for (int i = 0; i < 3; i++) {
            if (rows[i] == 3 || cols[i] == 3) {
                winX = true;
            }
            if (rows[i] == -3 || cols[i] == -3) {
                winO = true;
            }
            if (dia[0] == 3 || dia[1] == 3) {
                winX = true;
            }
            if (dia[0] == -3 || dia[1] == -3) {
                winO = true;
            }
        }
        if (winX && winO) {
            return false;
        } else if (winX) {
            return diff == 1;
        } else if (winO) {
            return diff == 0;
        } else {
            return true;
        }
    }
}
