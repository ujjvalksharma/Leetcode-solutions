class Solution {
    
    /*
       recursion + memorization
    At every index, we make a choice whether we want to pick an element in current sum or not. either case we increment the index and proceed.
    we always check if we are exceeding the array bound or sum is greater than target. we meorizie the index and current sum that affects reaching the target
    and how many more index can we pick. Also meorization helps in avoid re visiting the same subtree.
    
    */
    HashMap<String,Boolean> hmIndexAndSumToPresence=new HashMap<>();
    public boolean canPartitionHelper(int index,int currentSum,int[] nums,int targetSum){
        if(currentSum==targetSum){
            return true;
        }
        
        if(currentSum>targetSum||index>=nums.length){
            return false;
        }
        String key=index+"-"+currentSum;
        if(hmIndexAndSumToPresence.containsKey(key)){
            return hmIndexAndSumToPresence.get(key);
        }
        
        boolean isTargetSumFound= (canPartitionHelper(index+1,currentSum,nums,targetSum)||
               canPartitionHelper(index+1,currentSum+nums[index],nums,targetSum));
        
        hmIndexAndSumToPresence.put(key,isTargetSumFound);
        
        return isTargetSumFound;
    }
    public boolean canPartition(int[] nums) {
        int totalSum=0;
        for(int i=0;i<nums.length;i++){
            totalSum+=nums[i];
        }
        if(totalSum%2!=0){
            return false;
        }
     //   boolean foundPartitionSum
        return canPartitionHelper(0,0,nums,totalSum/2);
        
    }
}
