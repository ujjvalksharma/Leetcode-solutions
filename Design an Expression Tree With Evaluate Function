abstract class Node {
    protected String val;
    protected Node left, right;
    
    public abstract int evaluate();
};

class TreeNode extends Node {
    public TreeNode(String val){
        this.val = val;
        left = null;
        right = null;
    }
    
    public int evaluate(){
        return dfs(this);
    }
    
    private int dfs(Node root){
        if(root == null){
            return 0;
        }else if(root.left==null && root.right==null){
            return Integer.valueOf(root.val);
        }else{
            int left = dfs(root.left);
            int right = dfs(root.right);
            return evaluate(left, right, root.val);
        }
    }
    
    private int evaluate(int num1, int num2, String operator){
        switch(operator){
            case "+": return num1+num2;
            case "-": return num1-num2;
            case "*": return num1*num2; 
            case "/": return num1/num2;
        }
        
        return 0;
    }
}

class TreeBuilder {
    Stack<Node> stack = new Stack<>();
    
    Node buildTree(String[] postfix) {
        for(int i=0; i<postfix.length; i++){
            if(Character.isDigit(postfix[i].charAt(0))){
                stack.push(new TreeNode(postfix[i]));
            }else{
                Node right = stack.pop(), left = stack.pop();
                Node root = new TreeNode(postfix[i]);
                root.left = left;
                root.right = right;
                stack.push(root);
            }
        }
        
        return stack.pop();
    }
};
