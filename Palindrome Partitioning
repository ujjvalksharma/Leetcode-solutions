class Solution {
    
    List<List<String>> result = new ArrayList<>();
    
    public boolean isPalindrome(String s) {
        
        int start = 0;
        int end = s.length() - 1;
        while(start < end) {
            if(s.charAt(start) != s.charAt(end)) {
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    public void partitionHelper(String s, List<String> tempResult) {
        
        if(s.length() == 0) {
            result.add(new ArrayList<>(tempResult));
        }
        
        for(int i=1; i<=s.length(); i++) {
            String s1 = s.substring(0,i);
            String s2 = s.substring(i);
            if(isPalindrome(s1)) {
                tempResult.add(s1);
                partitionHelper(s2, tempResult);
                tempResult.remove(tempResult.size() - 1);
            }
        }
    }
    public List<List<String>> partition(String s) {
        
        partitionHelper(s, new ArrayList<>());
        
        return result;
    }
}
