/* memory+ recursion+dfs
We take mod after every new iterator of length, and we find the possible digits from a digit and store it in an 2d array then we iterate the and take each digit as starting point and then do dfs to its next possible digits and then we reach the final length we return 1 as we found a unique phone number, to not iterate a sub-tree we keep in mind the count and digit because we know we reach a digit and the left count is different then different total unique pairs can be formed, so we need to store the count and digit, hence when we iterate and we know we are at a same index and same left over count we can return total pairs formed from this index.

*/
class Solution {
    int MOD = 1_000_000_007;
    HashMap<String,Integer> hmDigitToTotalPairs=new HashMap<>();
    public int knightDialer(int n) {
        
        int[][] possibleDigitsFromIndex = new int[][]{{4,6},{6,8},{7,9},{4,8},{0,3,9},{},{0,1,7},
                                {2,6},{1,3},{2,4}};
        long total = 0;
        for(int i=0;i<=9;i++){
            total=(total+dfs(possibleDigitsFromIndex,n,i,1))%MOD;
        }
        return (int)total;
    }
    
    public int dfs(int[][] possibleDigitsFromIndex,int totalLength,int currentDigit,int count){
        if(count==totalLength){ // we reached the end, so we return 1 as we found 1 unique phone number
            return 1;
        }
            if(hmDigitToTotalPairs.containsKey(currentDigit+"-"+count)){
                return hmDigitToTotalPairs.get(currentDigit+"-"+count);
            }
        int totalCurrentMovements = 0;
        for(int nextDigit:possibleDigitsFromIndex[currentDigit]){
            totalCurrentMovements=(totalCurrentMovements
                                   +dfs(possibleDigitsFromIndex,totalLength,nextDigit,count+1)
                                  )%MOD;
        }
        hmDigitToTotalPairs.put(currentDigit+"-"+count,totalCurrentMovements);
        return totalCurrentMovements;
    }
}
//recursion
/*
class Solution {
    int MOD = 1_000_000_007;
    public int knightDialer(int n) {
        
        int[][] possibleDigitsFromIndex = new int[][]{{4,6},{6,8},{7,9},{4,8},{0,3,9},{},{0,1,7},
                                {2,6},{1,3},{2,4}};
        long total = 0;
        for(int i=0;i<=9;i++){
            total=(total+dfs(possibleDigitsFromIndex,totalLength,i,1))%MOD;
        }
        return (int)total;
    }
    
    public int dfs(int[][] possibleDigitsFromIndex,int totalLength,int nextDigit,int count){
        if(count==n){ // we reached the end, so we return 1 as we found 1 unique phone number
            return 1;
        }
        int totalCurrentMovements = 0;
        for(int nextDigit:possibleDigitsFromIndex[i]){
            totalCurrentMovements=(totalCurrentMovements
                                   +dfs(possibleDigitsFromIndex,totalLength,nextDigit,count+1)
                                  )%MOD;
        }
        return totalCurrentMovements;
    }
}
*/
