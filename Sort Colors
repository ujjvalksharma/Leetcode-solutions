class Solution {
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    //using 2 while loops
    public void sortColors(int[] nums) {
        
    /*  int index1 = 0;
        int i=0;
        while(i<nums.length) {
            
            if(nums[i] != 0) { //nums[i] can be 1/2
                i++;
            } else if(index1 != i) {
                swap(nums,i,index1);
                index1++;
            } else {
                i++;
                index1++;
            }
        }
        
        index2 = nums.length - 1;
        i=0;
        while(i<nums.length && i <= index2) {
            
            if(nums[i] != 2) {
                i++;
            } else {
                swap(nums,i,index2);
                index--;
            }
        }
        
       */
        
        //Just combine the above 2 while loops into one while loop
        int i=0;
        int indexToPutZero = 0;
        int indexToPutTwo = nums.length - 1;
        while(i<nums.length && i <= indexToPutTwo) {
            if(nums[i] == 0 && indexToPutZero != i) {
                swap(nums,i,indexToPutZero);
                indexToPutZero++;
                
            } else if(nums[i] == 2 && indexToPutTwo != i) {
                swap(nums,i,indexToPutTwo);
                indexToPutTwo--;
            } else {
                i++;
            }
        
        }
        
        
    }
}

/*

Solution 1
1) push all the zero to left
2) push all the ones to right

*/


class Solution {
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    //using 2 while loops
    public void sortColors(int[] nums) {
        
        int index = 0;
        int i=0;
        while(i<nums.length) {
            
            if(nums[i] != 0) { //nums[i] can be 1/2
                i++;
            } else if(index != i) {
                swap(nums,i,index);
                index++;
            } else {
                i++;
                index++;
            }
        }
        index = nums.length - 1;
        i=0;
        while(i<nums.length && i <= index) {
            
            if(nums[i] != 2) {
                i++;
            } else {
                swap(nums,i,index);
                index--;
            }
        }
        
        
    }
}

/*

Solution 1
1) push all the zero to left
2) push all the ones to right

*/
class Solution {
    /*
    https://www.youtube.com/watch?v=sEQk8xgjx64&t=242s
    */
    public void sortColors(int[] nums) {
        
        
        int start=0;
        int end=nums.length-1;
        int i=0;
        int passingNum=1;
        
        while(i<=end){
            
            if(nums[i]<passingNum){
                int temp=nums[i];
                nums[i]=nums[start];
                nums[start]=temp;
                start++;
                i++;
                continue;
            }
            if(nums[i]==passingNum){
                i++;
                    continue;
            }
            
              if(nums[i]>passingNum){
                int temp=nums[i];
                nums[i]=nums[end];
                nums[end]=temp;
                end--;
                      continue;
            }
            
        }
        
        
        
    }
}


class Solution {
    public void sortColors(int[] nums) {
        
        int start=0; //points to index where we put 0
        int end=nums.length-1; //points to index where we put 2
        
        while(start<nums.length&&nums[start]==0){
            start++;
        }
        
           while(end>=0&&nums[end]==2){
            end--;
        }
        int index=start; //moving pointer starts after 0s are set
        while(index<=end&&start<=end){
            
            
                
            if(nums[index]==0){
                swap(nums,index,start);
                start++;
            }
            
            if(nums[index]==2){
                swap(nums,index,end);
                end--;
            }
              
             if(nums[index]==0){
                swap(nums,index,start);
                start++;
            }
            
           while(nums[start]==0){
            start++;
        }
        
           while(nums[end]==2){
            end--;
        }      
     
     if(start>index){   
          index=start;
     }else{
         index++;
     }
            
            System.out.println("nums: "+Arrays.toString(nums)+" start: "+start+" end: "+end+" index: "+index);
            
        }
        
        
    }
    
    private void swap(int[] nums, int index1, int index2){
        int temp=nums[index1];
        nums[index1]=nums[index2];
        nums[index2]=temp;
    }
}

/*



one pass with 0 at start
[2, 0, 2, 1, 1, 0]

1st pass:
    s
[0, 0, 2, 1, 1,2]

2st pass:
          s
[0, 0, 1, 1, 2,2]

In the first pass we put all the zero at the start while incrementing index
and in the second pass we put all the 1 after the zero postion while incrementing index

Combing 1st pass and second pass is dutch national algo

*/


/*
This is like partition problem in quick sort. The goal is put 0 to the left and 2 to the right. So we first see if left is not pointing to 0 and if it is then left++ and same for right. Now we have swap position available for left and right. We check nums[mvnIndex] = 0 then swap left else right. if nums[index] = 1 then we don't do anything if we know later on if we find a 0 or 2 it move to the left or right available position which is <= or >=mvnIndex respectivity.  

Now we have 2 times same condition as 
if(nums[mvnIndex] == 0){
                swap(nums,mvnIndex,left);
            }else if(nums[mvnIndex] == 2) {
               swap(nums,mvnIndex,right); 
            }
            
            it could be after a swap nums[mvnIndex] got a 0 or 2 then if we increment it mvnIndex can't place nums[mvnIndex]  at its correct position.

*/

class Solution {
    public void sortColors(int[] nums) {
        
        int left=0;
        int right=nums.length-1;
        int mvnIndex =left;
        
        while(mvnIndex<=right){
            while(nums[left] == 0 && left+1<=mvnIndex){
                left++;
            }
            
            while(nums[right] == 2 && right-1>=mvnIndex){
                right--;
            }
            
            if(nums[mvnIndex] == 0){
                swap(nums,mvnIndex,left);
            }else if(nums[mvnIndex] == 2) {
               swap(nums,mvnIndex,right); 
            }
            
             if(nums[mvnIndex] == 0){
                swap(nums,mvnIndex,left);
            }else if(nums[mvnIndex] == 2) {
               swap(nums,mvnIndex,right); 
            }
            
            
            mvnIndex++;
        }
    }
    public void swap(int[] nums, int index1, int index2){
        int temp = nums[index1];
        nums[index1] = nums[index2];
        nums[index2] = temp;
    }
}
