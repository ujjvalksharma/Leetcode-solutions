class Solution {
    
    class Edge {
        int source;
        int weight;
        int destination;
        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.weight = weight;
            this.destination = destination;
        }
    }
    
    class Node {
        int id;
        int distanceFromK;
        public Node(int id, int distanceFromK) {
            this.id = id;
            this.distanceFromK = distanceFromK;
        }
    }
    
    public void buildGraph(Map<Integer,List<Edge>> graph, int[][] times) {
        
        for(int[] time : times) {
            if(!graph.containsKey(time[0])) {
                graph.put(time[0], new ArrayList<Edge>());
            }
            graph.get(time[0]).add(new Edge(time[0], time[1], time[2]));
        }
    }
    public int networkDelayTime(int[][] times, int n, int k) {
        
        Map<Integer,List<Edge>> graph = new HashMap<>();
        buildGraph(graph, times);
        PriorityQueue<Node> unSeenNodes = new PriorityQueue<Node>((a,b) -> a.distanceFromK - b.distanceFromK);
        int[] distanceFromK = new int[n + 1];
        for(int i = 1; i <= n; i++) {
            Node node;
            if( i == k) {
               node = new Node(i, 0);
            } else {
                node = new Node(i, Integer.MAX_VALUE);
            }
            distanceFromK[i] = node.distanceFromK;
            unSeenNodes.add(node);
        }
        
        while(!unSeenNodes.isEmpty()) {
            Node node = unSeenNodes.poll();
            
            if(node.distanceFromK > distanceFromK[node.id]) {
                continue;
            }
            
            List<Edge> neighbours = graph.getOrDefault(node.id, new ArrayList<>());
            
            for(Edge neighbour : neighbours) {
                int currentDistance = distanceFromK[neighbour.destination];
                int newDistance = distanceFromK[node.id] + neighbour.weight;
                if(newDistance < currentDistance) {
                    distanceFromK[neighbour.destination] = newDistance;
                    unSeenNodes.add(new Node(neighbour.destination, newDistance));
                }
            }
            
        }
        
        int minTime = -1;
        for(int i = 1; i <= n; i++) {
            
            if(distanceFromK[i] == Integer.MAX_VALUE) {
                return -1;
            } else {
                minTime = Math.max(minTime, distanceFromK[i]);
            }
        }
        return minTime;
    }
}







class Solution {
    //bellman-ford algo
    //visit all edges and mark desitination of an edje with minimum distance and mark the source edges distance=0 
    // visit all edges n-1 times
    public int networkDelayTime(int[][] times, int n, int k) {
        

        HashMap<Integer,Integer> hmNodeToDistance=new HashMap<Integer,Integer>();
                for(int[] time: times){
                    hmNodeToDistance.put(time[0],Integer.MAX_VALUE);
                     hmNodeToDistance.put(time[1],Integer.MAX_VALUE);
                }
        hmNodeToDistance.put(k,0);
        int ans=0;
        while(n>=0){
            
            for(int[] time: times){
                
                if(hmNodeToDistance.get(time[0])!=Integer.MAX_VALUE
                  &&hmNodeToDistance.get(time[0])+time[2]<hmNodeToDistance.get(time[1])){
                    hmNodeToDistance.put(time[1],hmNodeToDistance.get(time[0])+time[2]);
                }
            }
            
            n--;
        }
        
        
        for(int value: hmNodeToDistance.values()){
            if(value==Integer.MAX_VALUE){
                return -1;
            }
            ans=Math.max(ans,value);
        }
        
        return ans;
    }
}


//BellmanFord Algorithm
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        
        int[] distancesFromK = new int[n+1];
        Arrays.fill(distancesFromK, Integer.MAX_VALUE);
        distancesFromK[k] = 0;
        int minDistance = 0;
        
        while(n-1>0){
            
            for(int[] time: times){
                if(distancesFromK[time[0]] !=Integer.MAX_VALUE  && (distancesFromK[time[0]] +time[2] < distancesFromK[time[1]])){
                    distancesFromK[time[1]] = distancesFromK[time[0]] +time[2];
                }
                // System.out.println("distancesFromK: "+Arrays.toString(distancesFromK));
            }
            
            n--;
        }
        
        for(int i=1; i<distancesFromK.length; i++ ){
            if( distancesFromK[i] == Integer.MAX_VALUE){
                return -1;
            }
            
            minDistance = Math.max(minDistance, distancesFromK[i]);
        }
        
        return minDistance;     
    }
}


//Dikstra Algorithm
class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        
        int[] timeToReachANode = new int[n+1];
        Arrays.fill(timeToReachANode, Integer.MAX_VALUE);
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a,b)->a[1]-b[1]); //node,weight
        Map<Integer,List<Integer>> graph = new HashMap<>();
        Map<String,Integer> edge = new HashMap<>();
        Set<Integer> visited = new HashSet<Integer>();
        
        // timeToReachANode[k] = 0;
        pq.add(new int[]{k,0});
        
//         for(int i=1;i<=n;i++){
//             if(i == k){
//                 continue;
//             }
//             pq.add(new int[]{k,Integer.MAX_VALUE});
//         }
        
        for(int[] time: times){
            if(!graph.containsKey(time[0])){
                graph.put(time[0], new ArrayList<Integer>());
            }
            graph.get(time[0]).add(time[1]);
            edge.put(time[0]+","+time[1], time[2]);
        }
        
        while(!pq.isEmpty()){
            
            int[] node = pq.poll();
            
             if (node[1] > timeToReachANode[node[0]]) { // since we are not removing node from the heap, we may see a node again after it is relaxed since it could be added as it might be have been a neighbour of someone else. but don't iterate over it as we know we found a shortest to this node before.
                continue;
            }
            timeToReachANode[node[0]] = node[1];
            visited.add(node[0]);
        
            List<Integer> neighbours = graph.get(node[0]);
            
            if(neighbours == null){
                continue;
            }
            
            for(int neighbour: neighbours){
                
                if(visited.contains(neighbour)){
                    continue;
                }
                
                String XY= node[0]+","+neighbour;
                int newTime = timeToReachANode[node[0]] + edge.get(XY);
                
                if(newTime<timeToReachANode[neighbour] ){
                    pq.add(new int[]{neighbour,newTime});
                }
                
            }
            
            
        }
        
        int minTime = 0;
        for(int i=1;i <timeToReachANode.length ;i++){
            
            if(timeToReachANode[i] == Integer.MAX_VALUE){
                return -1;
            }
            
            minTime = Math.max(minTime, timeToReachANode[i]);
            
        }
        
        return minTime;
        
        
        
    }
}

