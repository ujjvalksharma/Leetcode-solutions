/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode[] splitListIntoTwo(ListNode head) {
        
        ListNode slow = head;
        ListNode fast = head;
        ListNode behindSlow = null;
        
        while(slow != null & fast != null && fast.next != null) {
            
            behindSlow = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        
        ListNode l2 = null;
        ListNode l1 = head;
        
        if(fast == null) {
            l2 = slow;
            behindSlow.next = null;
        } else if(fast.next == null) {
        l2 = slow.next;
        slow.next = null;
        behindSlow.next = null;
        }
        
        
        return new ListNode[] {l1, l2};
    }
    
    public ListNode reverse(ListNode head) {
        
        ListNode prev = null;
        ListNode current = head;
        
        while(current != null) {
            ListNode nextNode = current.next;
            current.next = prev;
            prev = current;
            current = nextNode;
        }
        
        return prev;
    }
    public boolean isPalindrome(ListNode head) {
        
        if(head.next == null) {
            return true; //single node
        }
        ListNode[] nodes = splitListIntoTwo(head);
        
        ListNode firstHalf = nodes[0];
        ListNode secondHalf = nodes[1];
        
        ListNode headOfSecondHalf = reverse(secondHalf);
        
        while(firstHalf != null & headOfSecondHalf != null) {
            
            if(firstHalf.val != headOfSecondHalf.val) {
                return false;
            }
            
            firstHalf = firstHalf.next;
            headOfSecondHalf = headOfSecondHalf.next;
        }
        
        return true;
    }
}
/*

 p  c n
   [1,2,2,1]

               s         f
1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8-->null(fast)

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        
        if(head.next == null) {
            return true;
        }
        
        if(head.next.next == null) {
            if(head.val == head.next.val) {
                return true;
            }
            return false;
        }

        ListNode[] splittedLinkList = splitTheLinklistInTwoHalf(head);
        ListNode firstHalf = splittedLinkList[0];
        ListNode secondHalf = splittedLinkList[1];
        
        ListNode headOfSecondHalf = reverse(secondHalf);
        
        while(headOfSecondHalf != null && firstHalf != null) {
            
            if(headOfSecondHalf.val != firstHalf.val) {
                return false;
            }
            
            headOfSecondHalf = headOfSecondHalf.next;
            firstHalf = firstHalf.next;
        }
        return true;
    }
    
    public ListNode reverse(ListNode head) {
        
        ListNode prevNode = null;
        ListNode currentNode = head;
        while(currentNode.next != null) {
            ListNode nextNode = currentNode.next;
            currentNode.next = prevNode;
            prevNode = currentNode;
            currentNode = nextNode;
        }
        currentNode.next = prevNode; //no more nodes left after this
        return currentNode;
    }
    
    public ListNode[] splitTheLinklistInTwoHalf(ListNode head) {
        
        ListNode firstHalf = null;
        ListNode secondHalf = null;
        ListNode tempHead = head;
        ListNode rabbit = head;
        ListNode tortoise = head;
        ListNode prevToTortoise = null;
        while(true) {
           
           prevToTortoise = tortoise;
           rabbit = rabbit.next.next;
           tortoise = tortoise.next;
           
           if(rabbit == null){
               prevToTortoise.next = null;
               secondHalf = tortoise;
               break;
           } else if(rabbit.next == null) {
               prevToTortoise.next = null;
               secondHalf = tortoise.next;
               break;
           }

        }
        firstHalf = head;
        
        return new ListNode[]{firstHalf, secondHalf};
    }
}

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/*
Reverse first half of linklist and then compare node val from by iterating two pointer moving forward and backward from mid.

*/
class Solution {
    public boolean isPalindrome(ListNode head) {
                    
     if(head.next==null){
         return true;
     }
     
        ListNode current=head.next;
        ListNode prev=head;
        ListNode fast=head.next;
        boolean isLinkListSizeEven=true;
        
        while(fast.next!=null){
            
            //linklist size is even
            if(fast.next.next!=null){
                fast=fast.next.next;
            }
            else{//linklist size is odd
                isLinkListSizeEven=false;
                fast=fast.next;
            }
            
            ListNode nextNode=current.next;
            current.next=prev;
            prev=current;
            current=nextNode;
        }
        if(!isLinkListSizeEven){ //if size is odd, then middle is not compare with any node
            prev=prev.next;
        }
        while(current!=null){
            if(current.val!=prev.val){
                return false;
            }
            current=current.next;
            prev=prev.next;
        }
        return true;
    }
    
    /*
         s         f  
    1 -> 2 -> 3 -> 4
    
         s             f  
    1 -> 2 -> 3 -> 4 ->5
    
    */
}
