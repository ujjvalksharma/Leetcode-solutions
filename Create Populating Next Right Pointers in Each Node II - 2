/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    List<Node> leftNodes = new ArrayList<>();

    public void connectHelper(Node root, int level) {
        if(root == null) {
            return;
        }
        if(leftNodes.size() == level) {
            leftNodes.add(root);
        } else if(leftNodes.size() > level) {
            Node leftNode = leftNodes.get(level);
            leftNode.next = root;
            leftNodes.set(level, root);
        }

        connectHelper(root.left, level + 1);
        connectHelper(root.right, level + 1);

    }
    public Node connect(Node root) {
        connectHelper(root, 0);
        return root;
    }
}
