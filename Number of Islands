class Solution {
    int[][] dirs = new int[][]{{0,1},{1,0},{-1, 0}, {0, -1}};
    public void numIslandsHelper(int x, int y, char[][] grid) {
        
        for(int[] dir : dirs) {
            
            int newX= x + dir[0];
            int newY = y + dir[1];
            
            if(newX < 0 || newY < 0 || newX >= grid.length || newY >= grid[0].length || grid[newX][newY] == '0') {
                continue;
            }
            
           // System.out.println("newX: "+newX+" newY: "+newY);
            
            grid[newX][newY] = '0';
            numIslandsHelper(newX, newY, grid);
            
        }
    }
    
    public int numIslands(char[][] grid) {
        
        int totalIsland = 0;
        
        for(int i=0; i<grid.length; i++) {
            for(int j=0; j<grid[0].length; j++) {
                
                if(grid[i][j] == '1') {
                    //System.out.println("i: "+i+" j: "+j);
                    totalIsland ++;
                    grid[i][j] = '0';
                    numIslandsHelper(i, j, grid);
                }
            }
        }
        
        
        return totalIsland;
        
    }
}

/*
[["1","1","1","1","0"]
["1","1","0","1","0"]
["1","1","0","0","0"]
["0","0","0","0","0"]]
*/
