class TicTacToe {

    class Score {
        
        int p1Score;
        int p2Score;
        
        public Score(int p1Score, int p2Score) {
            this.p2Score = p2Score;
            this.p1Score = p1Score;
        }
        
    }
    
    Score[] rowScore;
    Score[] colScore;
    Score diag1;
    Score diag2;
    int n;
    public TicTacToe(int n) {
        
        this.rowScore = new Score[n];
        this.colScore = new Score[n];
        this.diag1 = new Score(0,0); //row == col
        this.diag2 = new Score(0,0); //
        this.n = n;
        for(int i=0; i<n; i++) {
            this.rowScore[i] = new Score(0,0);
            this.colScore[i] = new Score(0,0);
        }
        
    }
    
    public int getWinner(int playerId, Score score) {
        
        if(playerId == 1) {
            score.p1Score++;
        } else {
            score.p2Score++;
        }
        
        if(score.p1Score + score.p2Score == this.n) {
            return score.p1Score > score.p2Score ? 1 : 2;
        }
        
        return 0;
    }
    
    public int move(int row, int col, int player) {
    
        int winner1 = 0;
        int winner2 = 0;
        int winner3 = 0;
        int winner4 = 0;
        
        if(row == col) {
            winner1 = getWinner(player, diag1);
        }
        
        if(row + col == n - 1) {
            winner2 = getWinner(player, diag2);
        }
        
        winner3 = getWinner(player, rowScore[row]);
        winner4 = getWinner(player, colScore[col]);
        
        return Math.max(winner1, Math.max(winner2, Math.max(winner3, winner4)));
        
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */ 

//https://www.youtube.com/watch?v=3iONGQqlj_I
class TicTacToe {

    class Player{
        int p1;
        int p2;
        Player(){
            this.p1=0;
            this.p2=0;
        }
    }
    /** Initialize your data structure here. */
    //diag1 is from top left to top bottom right
    //diag2 is from top right to top bottom left
    int p1Diag1=0; 
    int p2Diag1=0;
    
    int p1Diag2=0;
    int p2Diag2=0;
    
    Player[] rowPlayerCount;
    Player[] colPlayerCount;
    int size;
    public TicTacToe(int n) {
        
        rowPlayerCount=new Player[n];
        colPlayerCount=new Player[n];
        this.size=n;
    }
    
    /** Player {player} makes a move at ({row}, {col}).
        @param row The row of the board.
        @param col The column of the board.
        @param player The player, can be either 1 or 2.
        @return The current winning condition, can be either:
                0: No one wins.
                1: Player 1 wins.
                2: Player 2 wins. */
    public int move(int row, int col, int player) {
        
        if(row==col){
            if(player==1){
               p1Diag1++; 
            }else{
                p2Diag1++;
            }
        }
        
          if(Math.abs(row+col)==this.size-1){
            if(player==1){
               p1Diag2++; 
            }else{
                p2Diag2++;
            }
        }
        if(rowPlayerCount[row]==null){
           rowPlayerCount[row]=new Player(); 
        }
          if(colPlayerCount[col]==null){
           colPlayerCount[col]=new Player(); 
        }
        
         if(player==1){
               rowPlayerCount[row].p1++; 
               colPlayerCount[col].p1++; 
            }else{
                rowPlayerCount[row].p2++; 
                colPlayerCount[col].p2++; 
            }
        
        if(rowPlayerCount[row].p1==this.size||
           colPlayerCount[col].p1==this.size||
           p1Diag1==this.size||this.p1Diag2==this.size){
            return 1;
        }
        
         if(rowPlayerCount[row].p2==this.size||
            colPlayerCount[col].p2==this.size||
           p2Diag1==this.size||this.p2Diag2==this.size){
            return 2;
        }
        
        return 0;
    }
}

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe obj = new TicTacToe(n);
 * int param_1 = obj.move(row,col,player);
 */


/*                    3,0
[ (0,1) (0,0)  (0,0)  (1,0) ]
               1,2
[ (0,0) (0,0)  (1,0)  (0,0) ]
         2,1
[ (0,0) (1,0)  (0,1)  (0,0) ]
  3,0
[ (1,0) (0,0)  (0,0)  (0,1) ]

*/
