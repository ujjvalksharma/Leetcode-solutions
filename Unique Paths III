/*

DFS+ recursion in dfs we store the all index.

*/
class Solution {
    
    int totalUniquePaths=0;
    Set<String> setOfVisitedIndex=new HashSet<String>();
    int totalVistableIndex=0;
    public void uniquePathsIIIHelper(int[][] grid,int row,int column,String path){
        
        if(row>=grid.length||column>=grid[0].length||row<0||column<0){
            return;
        }
        if(setOfVisitedIndex.contains(row+","+column)||grid[row][column]==-1){
            return;
        }
        if(grid[row][column]==2){
            
            if(setOfVisitedIndex.size()+1==totalVistableIndex){
             
                totalUniquePaths++;
            }
            return;
        }
        
        setOfVisitedIndex.add(row+","+column);
        path=path+"("+row+","+column+")";
        uniquePathsIIIHelper(grid,row+1,column,path); //down
        uniquePathsIIIHelper(grid,row-1,column,path); //up
        uniquePathsIIIHelper(grid,row,column+1,path); //right
        uniquePathsIIIHelper(grid,row,column-1,path); //left
        
        setOfVisitedIndex.remove(row+","+column);
        
    }
    public int uniquePathsIII(int[][] grid) {
        
          for(int row=0;row<grid.length;row++){
            
             for(int column=0;column<grid[0].length;column++){
                 
                  if(grid[row][column]!=-1){
                    totalVistableIndex++;
                 }
             }
              
          }
        for(int row=0;row<grid.length;row++){
            
             for(int column=0;column<grid[0].length;column++){
                 if(grid[row][column]==1){
                     uniquePathsIIIHelper(grid,row,column,"");
                 }
             
        }
            
        }
       return totalUniquePaths;
        
    }
}
/*
[[1,0,0,0],
[0,0,0,0],
[0,0,2,-1]]

*/
