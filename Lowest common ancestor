/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
/*
  // status: 'n'---> found nothing, 'p'--> found p node,  'q'---> found q node
Lowest common ancestor in single pass. We do a post order traversal. we know we a ancestor if we found 
cases for ancestor node:
1) 'p'/'q' together at right/left of child subtree status
2) one of 'p'/'q' at right/left of child subtree status and the current node is either p node or q node.


*/
class Solution {
    
  
    TreeNode lowestAncestor=null;
    
    public char lowestCommonAncestorHelper(TreeNode root, TreeNode p, TreeNode q){
        if(root==null){
            return 'n';
        }
        
        char statusOfLeft=lowestCommonAncestorHelper(root.left,p,q);
        char statusOfRight=lowestCommonAncestorHelper(root.right,p,q);
        
       

        if(statusOfLeft=='p'&&statusOfRight=='q'){
            if(lowestAncestor==null){
                lowestAncestor=root;
            }
            return 'n';
        }
        else if(statusOfLeft=='q'&&statusOfRight=='p'){
            if(lowestAncestor==null){
                lowestAncestor=root;
            }
            return 'n';
        }
        else if((statusOfLeft=='p'||statusOfRight=='p')&&root==q){
            if(lowestAncestor==null){
                lowestAncestor=root;
            }
              return 'p';
        } else if((statusOfLeft=='q'||statusOfRight=='q')&&root==p){
            if(lowestAncestor==null){
                lowestAncestor=root;
            }
              return 'q';
        }
         else if(statusOfLeft=='p'||statusOfRight=='p'){
          
              return 'p';
        } else if(statusOfLeft=='q'||statusOfRight=='q'){
          
              return 'q';
        }
        
        
         if(root==p){
            return 'p';
        }
        
          if(root==q){
            return 'q';
        }
        return 'n';
        
        
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        
        lowestCommonAncestorHelper( root,  p,  q);
        return lowestAncestor;
    }
}
