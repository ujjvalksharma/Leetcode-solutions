class Solution {
    public String minWindow(String s, String t) {
        int[] countInS = new int[256];
        int[] countInT = new int[256];
        int start = 0;
        int minWindow = s.length();
        int windowStart = s.length();
        int windowEnd = s.length() - 1;
        for(int i = 0; i < t.length(); i++) {
            countInT[t.charAt(i) - 'A']++;
        }
        for(int end = 0; end < s.length(); end++) {
            countInS[s.charAt(end) - 'A']++;
            
            while(isCounterSubset(countInS, countInT) && start <= end) { 
                int currWindow = end - start + 1;
                if(currWindow <= minWindow) {
                    windowStart = start;
                    windowEnd = end;
                    minWindow = currWindow;
                }
                countInS[s.charAt(start) - 'A']--;
                start++;
            }
        }
        return s.substring(windowStart, windowEnd + 1);
    }

    public boolean isCounterSubset(int[] set, int[] subset) {

        for(int i = 0; i < 256; i++) {
            if(subset[i] > 0 && set[i] < subset[i] ) {
                return false;
            }
        }
        return true;

    }
}


class Solution {
    
    public boolean isCountArrEquals(int[] charCountT, int[] charCountS) {
        
        for(int i=0; i<256; i++) {
            
            if(charCountS[i] < charCountT[i]) {
                return false;
            }
            
        }
        
        return true;
    }
    
    public String minWindow(String s, String t) {
        
        
        int[] charCountT = new int[256];
        
        for(int i=0; i<t.length(); i++) {
            charCountT[t.charAt(i)]++;
        }
        
        int start = 0;
        int end = 0;
        int minWindowLen = Integer.MAX_VALUE;
        String minWindowStr = "";
        int[] charCountS = new int[256];
        
        while(end < s.length()) {
            
            
            if(charCountT[s.charAt(end)] > 0) {
              //  System.out.println(s.charAt(end));
                charCountS[s.charAt(end)]++;
            }
            
            
            if(isCountArrEquals(charCountT, charCountS)) {
            while(start<=end && isCountArrEquals(charCountT, charCountS)) {
                
                int len = end - start + 1;
                
                if(len < minWindowLen) {
                    minWindowStr = s.substring(start, end + 1);
                    minWindowLen = len;
                }
                
                if(charCountT[s.charAt(start)] > 0) {
                    charCountS[s.charAt(start)]--;
                }
                
                start++;
            }
              
                start--;
                charCountS[s.charAt(start)]++;
                
            }
            
            end++;
        }
        
        return minWindowStr;
        
    }
    
}

class Solution {
    /*
    Simple acquire and release by 2 pointers we create a hashmap and coun the total character and the window size is increment is if we find all charater in T hashmap with value equal to greater. if we reached a window size the we release character from start till window size is maintained.

    https://www.youtube.com/watch?v=e1HlptlipB0&t=1174s
    */
    public String minWindow(String s, String t) {
             if (s.length() == 0 || t.length() == 0) {
          return "";
      }

      // Dictionary which keeps a count of all the unique characters in t.
      Map<Character, Integer> dictT = new HashMap<Character, Integer>();
      for (int i = 0; i < t.length(); i++) {
          int count = dictT.getOrDefault(t.charAt(i), 0);
          dictT.put(t.charAt(i), count + 1);
      }

      // Number of unique characters in t, which need to be present in the desired window.
      int required = dictT.size();

      // Left and Right pointer
      int l = 0, r = 0;

      // formed is used to keep track of how many unique characters in t
      // are present in the current window in its desired frequency.
      // e.g. if t is "AABC" then the window must have two A's, one B and one C.
      // Thus formed would be = 3 when all these conditions are met.
      int formed = 0;

      // Dictionary which keeps a count of all the unique characters in the current window.
      Map<Character, Integer> windowCounts = new HashMap<Character, Integer>();

      // ans list of the form (window length, left, right)
      int[] ans = {-1, 0, 0};

      while (r < s.length()) {
          // Add one character from the right to the window
          char c = s.charAt(r);
          int count = windowCounts.getOrDefault(c, 0);
          windowCounts.put(c, count + 1);

          // If the frequency of the current character added equals to the
          // desired count in t then increment the formed count by 1.
          if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {
              formed++;
          }

          // Try and contract the window till the point where it ceases to be 'desirable'.
          while (l <= r && formed == required) {
              c = s.charAt(l);
              // Save the smallest window until now.
              if (ans[0] == -1 || r - l + 1 < ans[0]) {
                  ans[0] = r - l + 1;
                  ans[1] = l;
                  ans[2] = r;
              }

              // The character at the position pointed by the
              // `Left` pointer is no longer a part of the window.
              windowCounts.put(c, windowCounts.get(c) - 1);
              if (dictT.containsKey(c) && windowCounts.get(c).intValue() < dictT.get(c).intValue()) {
                  formed--;
              }

              // Move the left pointer ahead, this would help to look for a new window.
              l++;
          }

          // Keep expanding the window once we are done contracting.
          r++;   
      }

      return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
        
    }
}
