//DFS
//https://www.youtube.com/watch?v=1BJJvodXiUY
class Solution {
    
    public boolean isValid(int newRow, int newCol){
        return newRow >= 0 && newRow < m && 
               newCol >= 0 && newCol < n;
    }
    private final int[][] dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0},
                                  {-1, -1}, {1, 1}, {1, -1}, {-1, 1}};
    int m;
    int n;
    char[][] board;
    public void updateBoardHelper(int row, int col){
       
            int num = 0;
        for (int[] dir : dirs) {
            int newRow = dir[0] + row;
            int newCol = dir[1] + col;
            
            if (isValid(newRow,newCol)&& 
               this.board[newRow][newCol] == 'M') {
                num++;
            }
        }
        //mines found
        if (num > 0) {
            this.board[row][col] = (char) (num + '0');
            return;
        }
        //no adjacent mines
        board[row][col] = 'B';
        
        //visited empy square if curr square doesn't have adjacent mines
        for (int[] dir : this.dirs) {
            int newRow = dir[0] + row;
            int newCol = dir[1] + col;
            
            if (isValid(newRow,newCol)&&
               this.board[newRow][newCol] == 'E') {
                updateBoardHelper(newRow, newCol);
            }
        }
        
    }
    public char[][] updateBoard(char[][] board, int[] click) {
        int row = click[0];
        int col = click[1];
         this.m = board.length;
         this.n = board[0].length;
        this.board=board;

        if (board[row][col] == 'M' || board[row][col] == 'X') {
            board[row][col] = 'X';
            return board;
        }
        
        updateBoardHelper(row,col);
        
        return board;
    
    }
}
