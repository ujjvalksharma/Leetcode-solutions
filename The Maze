//update the maze instead of making a new visited, to save some space
//DFS
class Solution {
    int[] start;
    int[] destination;
    int[][] maze;
    boolean isDestinationReached;
    final int[][] dir=new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
    
   private boolean isValidPoint(int x, int y){
       if(x<0||y<0||x>=this.maze.length||y>=this.maze[0].length||this.maze[x][y]==1){
            return false;
        }
       return true;
    }
    private boolean hasPathHelper(int x, int y){
        
           if(!isValidPoint(x,y)){
                return false;
            }
            
        if(this.maze[x][y]==2){
            return false;
        }
        
        this.maze[x][y]=2; //mark visited
        if(x==this.destination[0]&&y==this.destination[1]){
           return true;
        }
        for(int i=0;i<dir.length;i++){
            
            int newX=x+this.dir[i][0];
            int newY=y+this.dir[i][1];
            
            if(!isValidPoint(newX,newY)){
                continue;
            }
            while(isValidPoint(newX+this.dir[i][0],newY+this.dir[i][1])){
                newX+=this.dir[i][0];
                newY+=this.dir[i][1];
            }
            
            if(hasPathHelper(newX,newY)){
                return true;
            }
        }
          return false;
        
    }
    public boolean hasPath(int[][] maze, int[] start, int[] destination) {
        this.maze=maze;
        this.start=start;
        this.destination=destination;
        this.isDestinationReached=false;
       return  hasPathHelper(this.start[0],this.start[1]);
        
       // return isDestinationReached;
    }
}
