class Solution {
    //sliding window
    public int longestOnes(int[] nums, int k) {
        
        int totalOnes = 0;
        int totalZeros = 0;
        int start = 0;
        int longestOnesSize = 0;
        for(int end = 0; end < nums.length; end++) {
            
            if(nums[end] == 1) {
                totalOnes++;
            }
            
            if(nums[end] == 0) {
                totalZeros++;
            }
            
            while(totalZeros > k) {
              if(nums[start] == 1) {
                totalOnes--;
              }
            
            if(nums[start] == 0) {
                totalZeros--;
            }
                start++;
                
            }
            
           longestOnesSize = Math.max(longestOnesSize, totalOnes + totalZeros); 
        }
        
        return longestOnesSize;
    }
}


class Solution {
    public int longestOnes(int[] nums, int k) {
        //sliding window with start and end and maintain totalZero = k
        
        int start = 0;
        int end = 0;
        int maxOnes = 0;
        int zeroCount = 0;
        int oneCount = 0;
        
        while(end < nums.length) {
            
            if(nums[end] == 1) {
                oneCount++;
                maxOnes = Math.max(maxOnes, oneCount + zeroCount);
            } else {
                zeroCount++;
                
                while(start<=end && zeroCount > k) {
                    
                    if(nums[start] == 1) {
                        oneCount--;
                    } else {
                        zeroCount--;
                    }
                    start++;
                }
                
                if(zeroCount <= k) {
                    maxOnes = Math.max(maxOnes, oneCount + zeroCount);
                }
            }
            
            end++;
        }
        
        return maxOnes;
    }
}

/*
Simple acquire and release concept. Keep a start and moving pointer and acquire all the time and release when we know totalZeros has exceed the limit (>K)

*/
class Solution {
    public int longestOnes(int[] A, int K) {
        
        int start=0;
        int totalZeros=0;
        int maxConsecutiveOnes =0;
        int totalOnes=0;
        for(int i=0;i<A.length;i++){
            if(A[i]==1){
                totalOnes++;
            }else{
                totalZeros++;
            }
            
            if(totalZeros>K){
                
                while(totalZeros>K){
                    if(A[start]==0){
                        totalZeros--;
                    }else{
                      totalOnes--;  
                    }
                    start++;
                }
            }
            maxConsecutiveOnes=Math.max(maxConsecutiveOnes,totalOnes+totalZeros);
        }
        return maxConsecutiveOnes;
        
        
        
    }
}
