class Solution {
    
    int[][] dirs = new int[][]{{0,1},{1,0},{0,-1},{-1,0}};
    int[][] cache;
    public int findIncreasingPathLength(int[][] matrix, int x, int y) {
        
        if(cache[x][y] != 0) {
        //    System.out.println("I am here");
            return cache[x][y];
        }
        
        int maxLen = 1;
        for(int[] dir : dirs) {
            
            int newX = x + dir[0];
            int newY = y + dir[1];
            
            if(newX >=0 && newY >= 0 && newX < matrix.length && newY < matrix[0].length && matrix[x][y] < matrix[newX][newY]) {
                int len = findIncreasingPathLength(matrix, newX, newY) + 1;
                maxLen = Math.max(maxLen, len);
                
            }
            
        }
        
        cache[x][y] = maxLen;
        return maxLen;
        
        
    }
    public int longestIncreasingPath(int[][] matrix) {
        
        int longestPath = 0;
        this.cache = new int[matrix.length][matrix[0].length];
        for(int i=0; i<matrix.length; i++) {
            for(int j=0; j<matrix[0].length; j++) {
                int pathLength = findIncreasingPathLength(matrix, i, j);
                longestPath = Math.max(longestPath, pathLength);
            }
        }
        
        return longestPath;
    }
}
