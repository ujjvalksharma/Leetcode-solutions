class Solution {
    
    Map<String,Integer> dp = new HashMap<>();
    public int longestPalindromeSubseqHelper(String s, int start, int end) {
        
        if(start > end) {
            return 0;
        }
        
        if(start == end) {
            return 1;
        }
        
        String key = start+","+end;
        
        if(dp.containsKey(key)) {
            return dp.get(key);
        }
        
        int maxLen = 0;  
        if(s.charAt(start) == s.charAt(end)) {
            maxLen = longestPalindromeSubseqHelper(s, start + 1, end - 1) + 2;
        } else {
            int len1 = longestPalindromeSubseqHelper(s, start + 1, end);
            int len2 = longestPalindromeSubseqHelper(s, start, end - 1);
            maxLen = Math.max(len1, len2);
        }
        //System.out.println("start: "+start+" end: "+end+" maxLen: "+maxLen);
        dp.put(key, maxLen);
        return maxLen;
    }
    public int longestPalindromeSubseq(String s) {
        return longestPalindromeSubseqHelper(s, 0, s.length() - 1);
    }
}

/*
same as longest common subsequence just reverse the string and then find longest common subsequence between two strings

*/
class Solution {
    
    
       HashMap<String,Integer> hmIndexOf1And2ToLength=new HashMap<>();
    public int longestPalindromeSubseqHelper(int indexOfT1,int indexOfT2,String text1,String text2,int sizeOfT1,int sizeOfT2){
        if(indexOfT1>=sizeOfT1){
            return 0;
        }
        
         if(indexOfT2>=sizeOfT2){
            return 0;
        }
        int lenWhenEqualChar=0;
        int lenIncreText1Index=0;
        int lenIncreText2Index=0;
        
        String key=indexOfT1+"-"+indexOfT2;
        if(hmIndexOf1And2ToLength.containsKey(key)){
            return hmIndexOf1And2ToLength.get(key);
        }
        if(text1.charAt(indexOfT1)==text2.charAt(indexOfT2)){
           lenWhenEqualChar=longestPalindromeSubseqHelper(indexOfT1+1,indexOfT2+1,text1,text2,sizeOfT1,sizeOfT2)+1;
        }else{
            
            lenIncreText1Index=longestPalindromeSubseqHelper(indexOfT1+1,indexOfT2,text1,text2,sizeOfT1,sizeOfT2);
            lenIncreText2Index=longestPalindromeSubseqHelper(indexOfT1,indexOfT2+1,text1,text2,sizeOfT1,sizeOfT2);
        }
        
        int maxLen=Math.max(lenWhenEqualChar,Math.max(lenIncreText1Index,lenIncreText2Index));
        hmIndexOf1And2ToLength.put(key,maxLen);
        return maxLen;
    }
    
    public int longestPalindromeSubseq(String s) {
        
        
        StringBuilder input1 = new StringBuilder(s);

        input1.reverse();
        
        
         return longestPalindromeSubseqHelper(0,0,s,input1.toString(),s.length(),s.length());
    }
}


//Solution 2
class Solution {
    HashMap<String,Integer> mem=new HashMap<String,Integer>();
    
    public int longestPalindromeSubseqHelper(String s, int l,int h){
        
        if(l>h){
            return 0;
        }
        if(l==h){
            return 1;
        }
        String key=l+","+h;
        if(mem.containsKey(key)){
            return mem.get(key);
        }
        int maxPalindromeLen=0;
        
        if(s.charAt(l)==s.charAt(h)){
            maxPalindromeLen=maxPalindromeLen+2;
            maxPalindromeLen+=longestPalindromeSubseqHelper(s,l+1,h-1);
        }else{
            maxPalindromeLen+=Math.max(longestPalindromeSubseqHelper(s,l+1,h),
                                      longestPalindromeSubseqHelper(s,l,h-1));
        }
        
        
        mem.put(key,maxPalindromeLen);
        
        return maxPalindromeLen;
    }
    public int longestPalindromeSubseq(String s) {
        
        return longestPalindromeSubseqHelper(s,0,s.length()-1);
    }
}
