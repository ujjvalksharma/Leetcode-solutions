/*

In this question, we basically perform sliding window.we have an start and end pointer and we know the window size by end-start+1, in that window we can find the most frequent character by c 26 letter map, now we know for window number of character that are not ewual to frequent character and it should be under or ewual to k, if it more then we increment start pointer to make sure nonfrequent character is under or equal to k for a window.

*/
class Solution {
    public int characterReplacement(String s, int k) {
        
       int[] countOfChar=new int[26];
       int sSize=s.length();
       int start=0;
       int end=0;
        int maxLen=0;
        
        while(end<sSize){
            
          countOfChar[s.charAt(end)-'A']++;
          int maxFreq=0;
            
            for(int freq:countOfChar){
                maxFreq=Math.max(maxFreq,freq);
            }
            
            int windowSize=end-start+1;
            int numberofNonFreqChar=windowSize-maxFreq;
            if(numberofNonFreqChar<=k){
                end++;
                maxLen=Math.max(maxLen,windowSize);
                continue;
            }
            
            while(numberofNonFreqChar>k){
                
                countOfChar[s.charAt(start)-'A']--;
                start++;
                
                 for(int freq:countOfChar){
                maxFreq=Math.max(maxFreq,freq);
              }
                
                windowSize=end-start+1;
                numberofNonFreqChar=windowSize-maxFreq;
            }
                
                end++;
        }
        
        return maxLen;
    }
}
