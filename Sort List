/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode merge(ListNode l1,ListNode l2){
        
        ListNode dummy=new ListNode(0);
        ListNode tempHead=dummy;
        while(l1!=null&l2!=null){
            
            if(l1.val<=l2.val){
                tempHead.next=l1;
                l1=l1.next;
            }else{
                tempHead.next=l2;
                    l2=l2.next; 
            }
            tempHead=tempHead.next;
        }
        
        if(l1!=null){
            tempHead.next=l1;
        }
        
         if(l2!=null){
            tempHead.next=l2;
        }
        
        return dummy.next;
    }
    
    
   
    
    public ListNode sortListHelper(ListNode head){
        if (head == null || head.next == null)
            return head;
        
        
             ListNode slow=head;
        ListNode fast=head;
        ListNode prevToSlowNode=null;
        while(fast!=null&&fast.next!=null){
            prevToSlowNode=slow;
            fast=fast.next.next;
            slow=slow.next;
        }
        prevToSlowNode.next=null; // this will help us to seperate the linklist in two one till mid and one after mid.
        ListNode left = sortListHelper(head);
        ListNode right = sortListHelper(slow);
        return merge(left, right);
    }
    public ListNode sortList(ListNode head) {
        
        return sortListHelper(head);
        
    }
}
