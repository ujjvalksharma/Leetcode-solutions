/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode findMiddleNode(ListNode head) {
        
        ListNode slow = head;
        ListNode fast = head;
        
        while(slow != null && fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        
        return slow;
    }
    
    public ListNode mergeTwoList(ListNode l1, ListNode l2) {
        
        ListNode head = new ListNode(0);
        ListNode temp = head;
        
        while(l1 != null && l2 != null) {
            if(l1.val < l2.val) {
                temp.next = l1;
                l1 = l1.next;
            } else {
                temp.next = l2;
                l2 = l2.next;
            }
            temp = temp.next;
        }
        
        while(l1 != null) {
            temp.next = l1;
            l1 = l1.next;
            temp = temp.next;
        }
        
        while(l2 != null) {
            temp.next = l2;
            l2 = l2.next;
            temp = temp.next;
        }
        
        return head.next;
    }
    
    public ListNode sortListHelper(ListNode start) {
        
        if(start == null) {
            return null;
        }
        
        if(start.next == null) {
            return start;
        }
        
        if(start.next.next == null) {
            ListNode c1 = start;
            ListNode c2 = start.next;
            int min = Math.min(c1.val, c2.val);
            int max = Math.max(c1.val, c2.val);
            c1.val = min;
            c2.val = max;
            return start;
        }
        
        ListNode mid = findMiddleNode(start);
        ListNode nodeAfterMid = mid.next;
        mid.next = null;
     //   System.out.println("start: "+start.val+" mid: "+mid.val+" next to mid: "+nodeAfterMid.val);
        ListNode l1 = sortListHelper(start);
        ListNode l2 = sortListHelper(nodeAfterMid);
    //    System.out.println("l1: "+l1.val+" l2: "+l2.val);
        ListNode mergedList = mergeTwoList(l1,l2);
        
        return mergedList;
    }
    public ListNode sortList(ListNode head) {    
        
        return sortListHelper(head);
    }
}

/*

4 ->2 ->1 -> 3


*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode merge(ListNode l1,ListNode l2){
        
        ListNode dummy=new ListNode(0);
        ListNode tempHead=dummy;
        while(l1!=null&l2!=null){
            
            if(l1.val<=l2.val){
                tempHead.next=l1;
                l1=l1.next;
            }else{
                tempHead.next=l2;
                    l2=l2.next; 
            }
            tempHead=tempHead.next;
        }
        
        if(l1!=null){
            tempHead.next=l1;
        }
        
         if(l2!=null){
            tempHead.next=l2;
        }
        
        return dummy.next;
    }
    
    
   
    
    public ListNode sortListHelper(ListNode head){
        if (head == null || head.next == null)
            return head;
        
        
             ListNode slow=head;
        ListNode fast=head;
        ListNode prevToSlowNode=null;
        while(fast!=null&&fast.next!=null){
            prevToSlowNode=slow;
            fast=fast.next.next;
            slow=slow.next;
        }
        prevToSlowNode.next=null; // this will help us to seperate the linklist in two one till mid and one after mid.
        ListNode left = sortListHelper(head);
        ListNode right = sortListHelper(slow);
        return merge(left, right);
    }
    public ListNode sortList(ListNode head) {
        
        return sortListHelper(head);
        
    }
}
