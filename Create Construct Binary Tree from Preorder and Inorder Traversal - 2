/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int index = 0;
    Map<Integer,Integer> nodeToIndex = new HashMap<>();
    public TreeNode buildTreeHelper(int[] preorder, int[] inorder, int start, int end) {
        if(start > end) {
            return null;
        }
        int value = preorder[index];
        index++;
        TreeNode node = new TreeNode(value);
        int idx = nodeToIndex.get(value);
        node.left = buildTreeHelper(preorder, inorder, start, idx - 1);
        node.right = buildTreeHelper(preorder, inorder, idx + 1, end);
        return node;
    }
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        for(int i = 0; i < inorder.length; i++) {
            nodeToIndex.put(inorder[i], i);
        }
        return buildTreeHelper(preorder, inorder, 0, inorder.length - 1);
    }
}
