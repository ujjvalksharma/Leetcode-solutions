class Solution {
    
    class Node {
        
        public Node[] children;
        public boolean isLeaf;
        
        Node() {
            this.children = new Node[26];
            this.isLeaf = false;
        }
        
    }
    
    public void insertInTrie(Node head, String word) {
        
        for(int i=0; i<word.length(); i++) {
            
            if(head.children[word.charAt(i) - 'a'] == null) {
                head.children[word.charAt(i) - 'a'] = new Node();
            }
            
            head = head.children[word.charAt(i) - 'a'];
        }
        
        head.isLeaf = true;
        
    }
    public int[][] indexPairs(String text, String[] words) {
        
        Node head = new Node();
        
        for(String word: words) {
            insertInTrie(head, word);
        }
        
        List<int[]> tempResults = new ArrayList<>();
        
        for(int i=0; i<text.length(); i++) {
            
            Node tempHead = head;
            int start = i;
            for(int j=i; j<text.length(); j++) {
                
                if(tempHead.children[text.charAt(j) - 'a'] == null) {
                    break;
                }
                
                tempHead = tempHead.children[text.charAt(j) - 'a'];
                
                if(tempHead.isLeaf) {
                    tempResults.add(new int[] {start, j});
                }
                
            }
            
            
        }
        
        int[][] result = new int[tempResults.size()][2];
        
        for(int i=0; i<tempResults.size(); i++) {
            result[i] = tempResults.get(i);
        }
        
        return result;
        
    }
}
