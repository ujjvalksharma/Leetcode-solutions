class Solution {
    
    class Pair {
        
        int sequenceCount;
        String word;
        Pair prevPair; //to find sequence of behind it (it is like you know tail of the link and you will find the head)
        
        Pair(int sequenceCount, String word) {
            
            this.sequenceCount = sequenceCount;
            this.word = word;
            
        }
    }
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        
        Queue<Pair> bfs = new LinkedList<>();
        Set<String> visited = new HashSet<String>();
        Set<String> setOfValidWord = new HashSet<String>(wordList);
        
        bfs.add(new Pair(1, beginWord));
        visited.add(beginWord);
        
        while(!bfs.isEmpty()) {
            
            Pair pair = bfs.poll();
            StringBuilder currentWordSb = new StringBuilder(pair.word);
            
            if(currentWordSb.toString().equals(endWord)) {
                return pair.sequenceCount;
            }
            
            for(char c='a';c<='z';c++) {
                
                for(int i=0; i<currentWordSb.length(); i++) {
                    
                    if(currentWordSb.charAt(i) != c) {
                        
                        char prevChar = currentWordSb.charAt(i);
                        currentWordSb.setCharAt(i, c);
                        if(!visited.contains(currentWordSb.toString()) && setOfValidWord.contains(currentWordSb.toString())) {
                            visited.add(currentWordSb.toString());
                            bfs.add(new Pair(pair.sequenceCount + 1, currentWordSb.toString()));
                        }
                        currentWordSb.setCharAt(i, prevChar);
                    }
                }
            }
        }
        
        return 0;
        
    }
}
