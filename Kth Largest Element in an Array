/*
Kth largest element using heap

*/
/*class Solution {
    public int findKthLargest(int[] nums, int k) {
        
        PriorityQueue<Integer> pq=new PriorityQueue<Integer>();
        int i=0;
        for(i=0;i<k;i++){
            pq.add(nums[i]);
        }
        
        for(;i<nums.length;i++){
            if(pq.peek()<nums[i]){
                pq.poll();
                pq.add(nums[i]);
            }
        }
       return pq.poll();
    }
}*/
/*
Kthe largest element using binary search + parition(quick sort) == quick select

*/
class Solution {
    
    public void swap(int[] nums, int index1, int index2){
        int temp=nums[index1];
        nums[index1]=nums[index2];
        nums[index2]=temp;
    }
    public int partition(int[] nums, int low, int high){ // quick sort partition
        int piviot=nums[high];
        int startIndex=low-1;
        
        for(int i=low;i<high;i++){
            if(nums[i]<=piviot){
                startIndex++;
                swap(nums,startIndex,i);
            }
        }
          swap(nums,startIndex+1,high);
        
        return startIndex+1;
    }
    
   public int findKthLargestHelper(int[] nums,int left, int right, int kLargestIndex) {
    /*
    Returns the k-th smallest element of list within left..right.
    */

    if (left == right) // If the list contains only one element,
      return nums[left];  // return that element

    
   int KthElementIndex = partition(nums,left, right);

    if (kLargestIndex == KthElementIndex){
         return nums[kLargestIndex];
    }
     
    else if (kLargestIndex < KthElementIndex){
        return findKthLargestHelper(nums,left, KthElementIndex - 1, kLargestIndex);
    }
      
    return findKthLargestHelper(nums,KthElementIndex + 1, right, kLargestIndex);
  }
    public int findKthLargest(int[] nums, int k) {
        
    // kth largest is (N - k)th smallest
    return findKthLargestHelper(nums,0, nums.length-1, nums.length - k);
  
    }
    
}
