import java.util.*;

class Solution {
    
    // Check if the coordinates are valid and if the orange can be rotted
    public boolean isValid(int x, int y, int[][] grid, Set<String> visited) {
        return 
            x >= 0 && 
            y >= 0 && 
            x < grid.length && 
            y < grid[0].length && 
            !visited.contains(x + "," + y) && 
            grid[x][y] == 1;  // Only fresh oranges (1) can be rotted
    }
    
    public int orangesRotting(int[][] grid) {
        Queue<int[]> bfsQueue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        int freshOranges = 0;  // Track the number of fresh oranges

        // Add all initially rotten oranges to the queue and count fresh oranges
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 2) {  // Rotten orange
                    bfsQueue.add(new int[]{i, j});
                    visited.add(i + "," + j);
                } else if (grid[i][j] == 1) {  // Fresh orange
                    freshOranges++;
                }
            }
        }
        
        // If there are no fresh oranges, return 0 because no time is needed
        if (freshOranges == 0) return 0;
        
        // If no rotten oranges exist to begin with and there are fresh oranges, return -1
        if (bfsQueue.isEmpty()) return -1;

        int[][] directions = {{0,1}, {1,0}, {0,-1}, {-1,0}};  // Right, Down, Left, Up
        int time = 0;  // Track the time
        
        // BFS to spread the rotting process
        while (!bfsQueue.isEmpty()) {
            int size = bfsQueue.size();
            boolean didRot = false;  // Track if any fresh orange rotted this minute

            for (int i = 0; i < size; i++) {
                int[] node = bfsQueue.poll();
                int x = node[0];
                int y = node[1];

                // Check all four directions
                for (int[] direction : directions) {
                    int newX = x + direction[0];
                    int newY = y + direction[1];
                    
                    // If valid and fresh orange found, rot it and add to queue
                    if (isValid(newX, newY, grid, visited)) {
                        visited.add(newX + "," + newY);
                        bfsQueue.add(new int[]{newX, newY});
                        grid[newX][newY] = 2;  // Rot the fresh orange
                        freshOranges--;  // One less fresh orange
                        didRot = true;  // At least one orange rotted this round
                    }
                }
            }
            
            if (didRot) {
                time++;  // Only increment time if something rotted this minute
            }
        }
        
        // If there are still fresh oranges left, return -1
        return freshOranges == 0 ? time : -1;
    }
}
