//smiple union-find
class Solution {
    
    public int findParent(int child, int[] parent) {
        
        if(child == parent[child]) {
            return child;
        }
        
        return findParent(parent[child], parent);

    }
    
    public boolean validTree(int n, int[][] edges) {
        
        if(edges.length + 1 != n) {
            return false;
        }
    
        int[] parent = new int[n];
        
        for(int i=0; i<parent.length; i++) {
            parent[i] = i;
        }
     //   System.out.println("I am here");
        for(int[] edge : edges) {
            
            int start = edge[0];
            int end = edge[1];
           // System.out.println("start: "+start+" end: "+end);
            int parent1 = findParent(start, parent);
            int parent2 = findParent(end, parent);
            
            if(parent1 == parent2) {
                return false;
            }
            
            parent[parent1] = parent2;
        }
   //     System.out.println("parent1: "+Arrays.toString(parent));
        for(int i=0; i<parent.length; i++) {
            int parentVal = findParent(i, parent);
             parent[i] = parentVal;
        }
        
  //      System.out.println("parent2: "+Arrays.toString(parent));
        
        int uniqueRootVal = parent[0];
        
         for(int i=0; i<parent.length; i++) {
             if(parent[i] != uniqueRootVal) { //dublicate root
                 return false;
             }
         }
        
        return true;
        
        
    }
}

//only one root
//no cycles  we can check using union find
