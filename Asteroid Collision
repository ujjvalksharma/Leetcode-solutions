/*
Keep track of positive number in the list/stack. When you see a negative number, see if 
you can cancel by recent positive element in stack/array and break out else we continue removing 
recent positive element till positiveAstroid.size() > 0
*/
class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        List<Integer> positiveAstroid = new ArrayList<Integer>();
        Set<Integer> destoryedAstroid = new HashSet<Integer>();
        for(int i = 0; i < asteroids.length; i++) {
            if(asteroids[i] > 0) {
                positiveAstroid.add(i);
            } else if(asteroids[i] < 0 && positiveAstroid.size() > 0) {
                while(positiveAstroid.size() > 0) {
                    int index = positiveAstroid.get(positiveAstroid.size() - 1);
                    if(asteroids[index] > Math.abs(asteroids[i])) {
                        destoryedAstroid.add(i);
                        break;
                    } else if(asteroids[index] < Math.abs(asteroids[i])) {
                        destoryedAstroid.add(index);
                        positiveAstroid.remove(positiveAstroid.size() - 1);
                    } else {
                        destoryedAstroid.add(index);
                        destoryedAstroid.add(i);
                        positiveAstroid.remove(positiveAstroid.size() - 1);
                        break;
                    }
                }
            }
        }
        System.out.println("destoryedAstroid: " + destoryedAstroid);
        int[] result = new int[asteroids.length - destoryedAstroid.size()];
        int index = 0;
        for(int i = 0; i < asteroids.length; i++) {
            if(destoryedAstroid.contains(i)) {
                continue;
            }
            result[index] = asteroids[i];
            index++;
        }
        return result;
    }
}

/*

asteroids

*/


/*
https://www.youtube.com/watch?v=6GGTBM7mwfs

All the negative elements are at bottom of the stack and collison can happen only when a negative comes after a positive number.
https://www.youtube.com/watch?v=6GGTBM7mwfs

*/
class Solution{
public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> recentAstroids =new Stack<>();
        
        for(int asteroid:asteroids){
            if(asteroid < 0  && !recentAstroids.isEmpty() && recentAstroids.peek() > 0){
                while(!recentAstroids.isEmpty()&& 
                      recentAstroids.peek() > 0 &&
                      recentAstroids.peek() <  Math.abs(asteroid)){
                   recentAstroids.pop();
                }
                if(recentAstroids.isEmpty() || 
                   recentAstroids.peek() < 0 ){
                    recentAstroids.push(asteroid);
                }
                else if(recentAstroids.peek() > 0 && recentAstroids.peek() ==  Math.abs(asteroid)){
                    recentAstroids.pop();
                } 
            }else{
                recentAstroids.push(asteroid);
            }
        }
    
        int res[] =new int[recentAstroids.size()];
    
        for(int i=recentAstroids.size()-1;i>=0;i--){
            res[i] =recentAstroids.pop();
        }
        return res;
    }
}
