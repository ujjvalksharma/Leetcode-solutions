//Solution 1


class Solution {
    
    /*
    The logic is that say a number given is 123, then we know know swaping works by fixing one number and find permutation of other for instance:
    1 (23) -- group 1 by fixing 1  has 2! element possibilities
    2 (13) -- group 2 by fixing 2 has 2! element possibilities
    3 (23) -- group 3 by fixing 3 has 2! element possibilities
    
    Now we know that, this would be sequential order if want to find 3rd element in sequence we know it is not in group 1, so now we boil down to group 2 and remove 2! element from k. Now:
    1 (3) -- group 1 by fixing 1  has 1! element possibilities
    3 (1) -- group 2 by fixing 3  has 1! element possibilities
    Thus,  we know that we know that we have pick '1' and now we are left with 3, so that would be last element
    
    To keep elements in sequential order, we can use a priorityqueue and elements in logN time. Total time complexity is O(n^2 logn) with space O(n)
     
    */
    
     public int factorial(int n)
    {
        int res = 1, i;
        for (i=2; i<=n; i++)
            res *= i;
        return res;
    }
    
    public String getPermutation(int n, int k) {

        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();
        StringBuilder kthSequence=new StringBuilder("");
        for(int i=1;i<=n;i++){
            pq.add(i);
        }
        
        while(true){
            
            List<Integer> prevRemovedNumbers=new ArrayList<Integer>();
            int size=pq.size();
            int currentGroupSize=factorial(size-1);
            int totalVisitedNumbers=0;
            while(!pq.isEmpty()){
                
                int num=pq.poll();
                totalVisitedNumbers+=currentGroupSize;
                if(totalVisitedNumbers>=k){
                    k=k- (totalVisitedNumbers-currentGroupSize);
                    kthSequence.append(""+num);
                    break;
                }
                
                prevRemovedNumbers.add(num);
                
            }
            pq.addAll(prevRemovedNumbers);
            if(kthSequence.length()==n){
                return kthSequence.toString();
            }
        }
        
    }
}
