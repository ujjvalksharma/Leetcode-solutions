/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/*
Since in inorder traversal elements come in order we know that once a dequeue of size K is formed the sliding window will shift only if 0th element of sliding window diff is large than current node diff and we do it by 
if(deque.peekFirst().diff > diff) {
                deque.removeFirst();
                deque.addLast(new Node(num, diff));
            }
            
otherwise we have foud the best window for us.

*/
class Solution {
    
    class Node {
        
        double num;
        double diff;
        
        public Node(double num, double diff) {
            this.num = num;
            this.diff = diff;
        }
        
    }
    
    double target;
    int SIZE;
    Deque<Node> deque = new ArrayDeque<Node>();
    public void inOrder(TreeNode root) {
        
        if(root == null) {
            return;
        }
        
        inOrder(root.left);
        
        double num = (double) root.val;
        double diff = Math.abs(num - target);
        if(deque.size() < SIZE) {
            deque.addLast(new Node(num, diff));
        } else {
            if(deque.peekFirst().diff > diff) {
                deque.removeFirst();
                deque.addLast(new Node(num, diff));
            }
        }
        
        inOrder(root.right);
        
        
    }
    
    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        this.target = target;
        this.SIZE = k;
        List<Integer> result = new ArrayList<Integer>();
       inOrder(root);
        
        while(!deque.isEmpty()) {
            result.add((int)deque.poll().num);
        }
        return result;
        
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//solution 1: heap + BST
// solution 2: BST + dequeue
//solution 3: BST + sliding window

//this is solution 1 : NlogK
class Solution {
    
    class Node {
        
        public int originalNum;
        public double diff;
        
        public Node(int originalNum, double diff) {
            this.diff = diff;
            this.originalNum = originalNum;
        }
    }
    
    List<Integer> answer = new ArrayList<Integer>();
        PriorityQueue<Node> pq = new PriorityQueue<Node>((n1,n2) -> {
            if(n2.diff > n1.diff) {
                return 1;
            } else if( n2.diff < n1.diff) {
                return -1;
            }
            return 0;
        } );
    
    public void inorder(TreeNode root, double target, int k) {
        
        if(root == null) {
            return;
        }
        
        inorder(root.left, target, k);
        
        double diff = 0;
        double rootVal = (double) root.val;
        if(target > rootVal) {
            diff = target - rootVal;
        } else {
            diff = rootVal - target;
        }
        
        if(pq.size() < k) {
            pq.add(new Node(root.val, diff));
        }else if(pq.size() == k && pq.peek().diff > diff) {
            pq.poll();
            pq.add(new Node(root.val, diff));
        }
        
        inorder(root.right, target, k);
        
    }

    public List<Integer> closestKValues(TreeNode root, double target, int k) {
        //generate a dequeue in decreasing order
        // we procceed in BST we will 

        inorder(root, target, k);
        
        while(!pq.isEmpty()) {
            Node item = pq.poll();
            answer.add(item.originalNum);
        }
        
        return answer;
    }
}
