/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/
/*
We put one path on set/hashtable from node to parent and then we check the other node path from node to parent. The first node we find is the lowest common ancestor

*/
class Solution {
    public Node lowestCommonAncestor(Node p, Node q) {
        Set<Node> path=new HashSet<Node>();
        
        Node tempP=p;
        
        while(tempP!=null){
            path.add(tempP);
            tempP=tempP.parent;
        }
        
        
          Node tempQ=q;
        while(tempQ!=null){
          if(path.contains(tempQ)){
              return tempQ;
          }
             tempQ=tempQ.parent;
        }
        
        return null;
    }
}
