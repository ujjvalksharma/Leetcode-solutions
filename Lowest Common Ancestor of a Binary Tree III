/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
};
*/

class Solution {
    
    /**
    In this question we recursively traverse the tree parent wise and store it in a list for p node and hashet for q node. now we know when i search the list for p and the first node that is common to both the list the lowest common parent for them.
    
    
    **/
     List<Node> listOfParentsOfP=new ArrayList<>();
     Set<Node> listOfParentsOfQ=new HashSet<>();
    
    public void findParentsOfNodeP(Node node){
        if(node==null){
            return;
        }
        listOfParentsOfP.add(node);
        findParentsOfNodeP(node.parent);
    }
    
    
       public void findParentsOfNodeQ(Node node){
        if(node==null){
            return;
        }
        listOfParentsOfQ.add(node);
        findParentsOfNodeQ(node.parent);
    }
    
    public Node lowestCommonAncestor(Node p, Node q) {
        
        findParentsOfNodeP(p);
         findParentsOfNodeQ(q);
        
        String parentPathOfP="";
        String parentPathOfQ="";
        
        for(int i=0;i<listOfParentsOfP.size();i++){
            if(listOfParentsOfQ.contains(listOfParentsOfP.get(i))){
                return listOfParentsOfP.get(i);
            }
        }
        
        return null;
    }
}
