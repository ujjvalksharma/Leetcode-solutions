class Solution {
    int[][] dp;
    public int longestCommonSubsequenceHelper(String text1, String text2, int index1, int index2) {
        if(index1 >= text1.length() || index2 >= text2.length()) {
            return 0 ;
        }
        if(dp[index1][index2] != -1) {
            return dp[index1][index2];
        }
        int maxCount = 0;
        if(text1.charAt(index1) == text2.charAt(index2)) {
            maxCount = 1 + longestCommonSubsequenceHelper(text1, text2, index1 + 1, index2 + 1);
        } else {
            int count1 = longestCommonSubsequenceHelper(text1, text2, index1, index2 + 1);
            int count2 = longestCommonSubsequenceHelper(text1, text2, index1 + 1, index2);
            maxCount = Math.max(count1, count2);
        }
        dp[index1][index2] = maxCount;
        return maxCount; 
    }
    public int longestCommonSubsequence(String text1, String text2) {
        dp = new int[text1.length()][text2.length()];
        
        for(int i=0; i<dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }
        return longestCommonSubsequenceHelper(text1, text2, 0, 0);
    }
}


/*
recursion+memeory
In this question, we increment index1 and index2 if there is match as we need to move ahead else we increment either index1 or index2 to find possibility of a match. we store their indexs in memory/hashmap as it will affect further matches that we are about to see and we can avoid re-iteration over the sub-tree.


*/
class Solution {
    HashMap<String,Integer> hmIndexOf1And2ToLength=new HashMap<>();
    public int longestCommonSubsequenceHelper(int indexOfT1,int indexOfT2,String text1,String text2,int sizeOfT1,int sizeOfT2){
        if(indexOfT1>=sizeOfT1){
            return 0;
        }
        
         if(indexOfT2>=sizeOfT2){
            return 0;
        }
        int lenWhenEqualChar=0;
        int lenIncreText1Index=0;
        int lenIncreText2Index=0;
        
        String key=indexOfT1+"-"+indexOfT2;
        if(hmIndexOf1And2ToLength.containsKey(key)){
            return hmIndexOf1And2ToLength.get(key);
        }
        if(text1.charAt(indexOfT1)==text2.charAt(indexOfT2)){
           lenWhenEqualChar= lenWhenEqualChar=longestCommonSubsequenceHelper(indexOfT1+1,indexOfT2+1,text1,text2,sizeOfT1,sizeOfT2)+1;
        }else{
            
            lenIncreText1Index=longestCommonSubsequenceHelper(indexOfT1+1,indexOfT2,text1,text2,sizeOfT1,sizeOfT2);
            lenIncreText2Index=longestCommonSubsequenceHelper(indexOfT1,indexOfT2+1,text1,text2,sizeOfT1,sizeOfT2);
        }
        
        int maxLen=Math.max(lenWhenEqualChar,Math.max(lenIncreText1Index,lenIncreText2Index));
        hmIndexOf1And2ToLength.put(key,maxLen);
        return maxLen;
    }
    public int longestCommonSubsequence(String text1, String text2) {
        return longestCommonSubsequenceHelper(0,0,text1,text2,text1.length(),text2.length());
    }
}

/* // recursion
class Solution {
    public int longestCommonSubsequenceHelper(int indexOfT1,int indexOfT2,String text1,String text2,int sizeOfT1,int sizeOfT2){
        if(indexOfT1>=sizeOfT1){
            return 0;
        }
        
         if(indexOfT2>=sizeOfT2){
            return 0;
        }
        int lenWhenEqualChar=0;
        int lenIncreText1Index=0;
        int lenIncreText2Index=0;
        if(text1.charAt(indexOfT1)==text2.charAt(indexOfT2)){
           lenWhenEqualChar= lenWhenEqualChar=longestCommonSubsequenceHelper(indexOfT1+1,indexOfT2+1,text1,text2,sizeOfT1,sizeOfT2)+1;
        }else{
            
            lenIncreText1Index=longestCommonSubsequenceHelper(indexOfT1+1,indexOfT2,text1,text2,sizeOfT1,sizeOfT2);
            lenIncreText2Index=longestCommonSubsequenceHelper(indexOfT1,indexOfT2+1,text1,text2,sizeOfT1,sizeOfT2);
        }
        
        int maxLen=Math.max(lenWhenEqualChar,Math.max(lenIncreText1Index,lenIncreText2Index));
        
        return maxLen;
    }
    public int longestCommonSubsequence(String text1, String text2) {
        return longestCommonSubsequenceHelper(0,0,text1,text2,text1.length(),text2.length());
    }
}



*/
