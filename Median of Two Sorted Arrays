class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        // Ensure nums1 is the smaller array.
        if(nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int m = nums1.length;
        int n = nums2.length;
        int total = m + n;
        int half = (total + 1) / 2;
        
        int start = 0;
        int end = m;
        
        while (start <= end) {
            int i = start + (end - start) / 2;
            int j = half - i;
            
            int left1 = i == 0 ? Integer.MIN_VALUE : nums1[i - 1];
            int right1 = i == m ? Integer.MAX_VALUE : nums1[i];
            int left2 = j == 0 ? Integer.MIN_VALUE : nums2[j - 1];
            int right2 = j == n ? Integer.MAX_VALUE : nums2[j];
            
            if (left1 <= right2 && left2 <= right1) {
                // Correct partition found.
                if (total % 2 == 0) {
                    int maxLeft = Math.max(left1, left2);
                    int minRight = Math.min(right1, right2);
                    return (maxLeft + minRight) / 2.0;
                } else {
                    return Math.max(left1, left2);
                }
            } else if (left1 > right2) {
                end = i - 1;
            } else {
                start = i + 1;
            }
        }
        
        return -1.0;
    }
}


// class Solution {
//     public double findMedianSortedArrays(int[] nums1, int[] nums2) {
//         if(nums2.length > nums1.length) {
//             return findMedianSortedArrays(nums2, nums1);
//         }

//         int start = 0;
//         int end = nums1.length;
//         int size = nums1.length + nums2.length;
//         int paritionSize = size/2;
//         while(true) {
//             int mid1 = start + (end - start)/2;
//             int mid2 = (paritionSize - 1) - (mid1 + 1);
//             int leftOfNum1 = mid1 < 0 ? Integer.MIN_VALUE : nums1[mid1];
//             int rightOfNum1 = mid1 + 1 >= nums1.length ? Integer.MAX_VALUE : nums1[mid1 + 1];
//             int leftOfNum2 = mid2 < 0 ? Integer.MIN_VALUE : nums2[mid2];
//             int rightOfNum2 = mid2 + 1 >= nums2.length ? Integer.MAX_VALUE : nums2[mid2 + 1];

//             if(leftOfNum1 <= rightOfNum2 && leftOfNum2 <= rightOfNum1) {
//                 if(size %2 == 0) {
//                     int max1 = Math.max(leftOfNum1, leftOfNum2);
//                     int min1 = Math.min(rightOfNum1, rightOfNum2);
//                     double result = (double) (max1 + min1);
//                     return result/2;
//                 } else {
//                     double result = (double) Math.min(rightOfNum1, rightOfNum2);
//                     return result;
//                 }
//             } else if(leftOfNum1 > rightOfNum2) {
//                 end = mid1 - 1;
//             } else {
//                 start = mid1 + 1;
//             }

//         }
//     }
// }
// /*

// arr1 = [x1,x2,x3|x4,x5,x6,x7]
// arr2 = [y1,y2,y3,y4,y5|y6,y7]

// 1,2
// 3,4

// 1,2,3,4 

// 1) binary search on m

// */
