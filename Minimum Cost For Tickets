/*
recursion+memory+dfs
In this question, we at each index we check we need to buy a pass or not and we make make pass even if we don't need to buy it then we iterate over each sub-tree possibilites and return minimum cost. we return 0 at the end of array. to memorize the sub-tree we store the index and the endday for a particular pass because an index could have different pass end day.

*/
class Solution {
    HashMap<String,Integer> hmDayToCost=new HashMap<>();
    public int mincostTicketsHelper(int index,int passEndDay,int[] days,int[] costs){
        if(index>=days.length){
            return 0;
        }
        int buyNoPass=Integer.MAX_VALUE;
        if(passEndDay>=days[index]){
            buyNoPass=mincostTicketsHelper(index+1,passEndDay,days,costs); // no need to buy pass
        }
     if(hmDayToCost.containsKey(index+"-"+passEndDay)){
         return hmDayToCost.get(index+"-"+passEndDay);
     }
        /* buying pass even if we have a pass*/
        int buy1DayPass=mincostTicketsHelper(index+1,days[index]+1-1,days,costs)+costs[0]; 
        int buy7DayPass=mincostTicketsHelper(index+1,days[index]+7-1,days,costs)+costs[1];
        int buy30DayPass=mincostTicketsHelper(index+1,days[index]+30-1,days,costs)+costs[2];
        
        int minimumCost= Math.min(buyNoPass,Math.min(buy1DayPass,Math.min(buy7DayPass,buy30DayPass)));
        
        hmDayToCost.put(index+"-"+passEndDay,minimumCost);
        return minimumCost;
    }
    public int mincostTickets(int[] days, int[] costs) {
        return mincostTicketsHelper(0,-1,days,costs);
    }
}

/*
//recursion

class Solution {
    public int mincostTicketsHelper(int index,int passEndDay,int[] days,int[] costs){
        if(index>=days.length){
            return 0;
        }
        int buyNoPass=Integer.MAX_VALUE;
        if(passEndDay>=days[index]){
            buyNoPass=mincostTicketsHelper(index+1,passEndDay,days,costs); // no need to buy pass
        }

        // buying pass even if we have a pass
        int buy1DayPass=mincostTicketsHelper(index+1,days[index]+1-1,days,costs)+costs[0]; 
        int buy7DayPass=mincostTicketsHelper(index+1,days[index]+7-1,days,costs)+costs[1];
        int buy30DayPass=mincostTicketsHelper(index+1,days[index]+30-1,days,costs)+costs[2];
        
        int minimumCost= Math.min(buyNoPass,Math.min(buy1DayPass,Math.min(buy7DayPass,buy30DayPass)));
        
        return minimumCost;
    }
    public int mincostTickets(int[] days, int[] costs) {
        return mincostTicketsHelper(0,-1,days,costs);
    }
}




*/
