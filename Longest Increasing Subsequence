/*
LIS using binary search and Dp
in this problem, we add element to list if it is greater than the previous element else we add the lower element to index in the list where we find the fist greater element from left to right using binary and at the end, we have a list with increasing sequence.
*/
class Solution {
    
    int getLastFirstGreaterNumber(List<Integer> nums, int low, int high, int key){
        
        int index=high;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(nums.get(mid)>=key){
                index=Math.min(index,mid);
                high=mid-1;
            }else{
                   low=mid+1;
            }
        }
        
        return index;
    }
    public int lengthOfLIS(int[] nums) {
        
        List<Integer> increasingSequence=new ArrayList<Integer>();
        for(int num: nums){
            if(increasingSequence.size()==0){
                increasingSequence.add(num);
            }else if(num>increasingSequence.get(increasingSequence.size()-1)){
                increasingSequence.add(num);
            }else{
                int  index=getLastFirstGreaterNumber(increasingSequence,0,increasingSequence.size()-1,num);
                increasingSequence.set(index,num);
            }
        }
        return increasingSequence.size();
        
    }
}
// Using Dp On2
/*
In this question, we know that any index i, we need to see that from i+1 till the end can we form a increasing subsequence length. And the element we choose to form increasing we should pick the one that has the high increasing subseuqnce length. We can store elements from right to left in Dp array and we pick element it forms the maximum increasing subsequence length.
*/
class Solution {
    public int lengthOfLIS(int[] nums) {
        
        int[] dpTable=new int[nums.length];
        int maxSubsequenceLen=1;
        
        for(int i=nums.length-1;i>=0;i--){
            dpTable[i]=1;
          for(int j=i+1;j<nums.length;j++){
              if(nums[j]>nums[i]){
                 dpTable[i]=Math.max(dpTable[j]+1,dpTable[i]); 
                  maxSubsequenceLen=Math.max(maxSubsequenceLen,dpTable[i]);
              }
            
        }
            
        }
        
        return maxSubsequenceLen;
    }
}
