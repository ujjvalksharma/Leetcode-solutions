class Solution {
    /*
    If else condition is recursion can be replaced with 0/1 in memorization.
    int i, int k, int holding, -> holding is 0/1
    */
    public int maxProfit(int k, int[] prices) {
        int n = prices.length;
        if (n == 0) return 0;
        
        // If k is large enough, it becomes the unlimited transactions problem.
        if (k >= n / 2) {
            int profit = 0;
            for (int i = 1; i < n; i++) {
                if (prices[i] > prices[i - 1]) {
                    profit += prices[i] - prices[i - 1];
                }
            }
            return profit;
        }
        
        // 3D memoization array: dimensions are [day index][transactions left][holding state]
        // holding state: 0 = not holding any stock, 1 = currently holding a stock.
        Integer[][][] memo = new Integer[n][k + 1][2];
        return dp(prices, 0, k, 0, memo);
    }
    
    // dp returns the maximum profit starting from day 'i', with 'k' transactions remaining, 
    // and a given 'holding' state (0 or 1).
    private int dp(int[] prices, int i, int k, int holding, Integer[][][] memo) {
        // Base case: if we have processed all days, no more profit can be made.
        if (i == prices.length) return 0;
        
        if (memo[i][k][holding] != null) {
            return memo[i][k][holding];
        }
        
        int result;
        if (holding == 0) {
            // Option 1: Do nothing, remain not holding.
            int skip = dp(prices, i + 1, k, 0, memo);
            // Option 2: Buy stock on day i (only if you are not holding).
            int buy = dp(prices, i + 1, k, 1, memo) - prices[i];
            result = Math.max(skip, buy);
        } else {
            // Currently holding a stock.
            // Option 1: Do nothing (hold onto the stock).
            int hold = dp(prices, i + 1, k, 1, memo);
            // Option 2: Sell the stock on day i (this completes a transaction, so decrement k).
            int sell = 0;
            if (k > 0) {
                sell = dp(prices, i + 1, k - 1, 0, memo) + prices[i];
            }
            result = Math.max(hold, sell);
        }
        
        memo[i][k][holding] = result;
        return result;
    }
}



// class Solution {
//     Map<String,Integer> cache = new HashMap<>();
//     public int maxProfitHelper(int k, int[] prices, int index) {
//         if(index >= prices.length || k == 0) {
//             return 0;
//         }
//         String key = index + "-" + k;
//         if(cache.containsKey(key)) {
//             return cache.get(key);
//         }
//         int maxProfit = 0;
//         int stockBought = prices[index];
//         int profit = 0;
//         for(int i = index + 1; i < prices.length; i++) {
//             if(prices[i] > stockBought) {
//                 profit = (prices[i] - stockBought) + maxProfitHelper(k - 1, prices, i + 1);
//                 maxProfit = Math.max(maxProfit, profit);
//             }
//         }
//         profit = maxProfitHelper(k, prices, index + 1);
//         maxProfit = Math.max(maxProfit, profit);
//         cache.put(key, maxProfit);
//         return maxProfit;
//     }
//     public int maxProfit(int k, int[] prices) {
//         return maxProfitHelper(k, prices, 0);
//     }
// }
