/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {

        if(root == null) {
            return null;
        }

        if(key > root.val) {
            root.right = deleteNode(root.right, key);
        } else if( key < root.val) {
            root.left = deleteNode(root.left, key);
        } else {
            if(root.left == null && root.right == null) { //case 1 both children are null
                return null;
            } else if(root.left == null) { //case 2 : one childre is null
                return root.right;
            } else if(root.right == null) {
                return root.left;
            } else { //case3: no child null, get inorder sucesscer
                TreeNode inorderSuccessor = getSuccessor(root);
                root.val = inorderSuccessor.val;
                root.right = deleteNode(root.right, inorderSuccessor.val);
            }
        }
        return root;
    }
    TreeNode getSuccessor(TreeNode curr) {
        curr = curr.right;
        while (curr != null && curr.left != null) {
            curr = curr.left;
        }
        return curr;
    }
}
