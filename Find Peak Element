class Solution {
    public int findPeakElement(int[] nums) {
        
        if(nums.length==1){
            return 0;
        }
        
        int l=0;
        int h=nums.length-1;
        
        while(l<=h){
            
            int mid=l+(h-l)/2;
                if(mid==0&&nums[0]>nums[1]){
                    return 0;
                }
                if(mid==nums.length-1&&nums[mid]>nums[mid-1]){
                    return nums.length-1;
                }
            
            if(mid+1<nums.length&&mid-1>=0&&nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1]){
                return mid;
            }
            
            if(mid+1<nums.length&&mid-1>=0&&nums[mid-1]>=nums[mid]&&nums[mid]>=nums[mid+1]){
                h=mid-1;
            }else{
                l=mid+1;
            }
            
        }
        
        return -1;
        
    }
}



class Solution {
    int peakElementIndex = -1;
    
    public void binarySearch(int left, int right, int[] nums){
        
        if(left>right || peakElementIndex!=-1){
            return;
        }
        
        int mid = left+ (right-left)/2;
        System.out.println("left: "+left+" right: "+right+" mid: "+mid);
        if(mid-1>=0&&mid+1<nums.length&&nums[mid]>nums[mid-1]&&nums[mid]>nums[mid+1]){
            peakElementIndex = mid;
        } else if(mid == 0 && nums[mid]>nums[mid+1] ){
            peakElementIndex = mid;
        } else if(mid == nums.length-1 && nums[mid]>nums[mid-1]){
            peakElementIndex = mid;
        } else if(nums[mid]<nums[mid+1]) {
            System.out.println("going right");
           binarySearch(mid+1,right,nums); 
        }else {
            System.out.println("going left");
           binarySearch(left,mid-1,nums);  
        }
    }
    public int findPeakElement(int[] nums) {
        if(nums.length == 1){
            return 0;
        }
        
        binarySearch(0,nums.length-1,nums);
        return peakElementIndex;
    }
}

/*
       p
[1,2,1,3,5,6,4]

*/

/*
  /\
 /  \
/    \

*/
