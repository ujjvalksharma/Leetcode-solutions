class Solution {
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
        List<Integer> result = new ArrayList<Integer>();
        
        // Base case
        if (arr.length == k) {
            for (int i = 0; i < k; i++) {
                result.add(arr[i]);
            }
            
            return result;
        }
        
        // Binary search to find the closest element
        int left = 0;
        int right = arr.length - 1;
        int mid = 0;
        while (left <= right) {
            mid = (left + right) / 2;
            if (arr[mid] > x) {
                right = mid - 1;
            } else if (arr[mid] < x) {
                left = mid + 1;
            } else {
                break;
            }
        }
        System.out.println(mid);
        // Initialize our sliding window's bounds
        left = Math.max(0, mid - 1);
        right = left + 1;
        
        // While the window size is less than k
        while (right - left - 1 < k) {
            // Be careful to not go out of bounds
            if (left == -1) {
                right += 1;
                continue;
            }
            
            // Expand the window towards the side with the closer number
            // Be careful to not go out of bounds with the pointers
            if (right == arr.length || Math.abs(arr[left] - x) <= Math.abs(arr[right] - x)) {
                left -= 1;
            } else {
                right += 1;
            }
        } 

        // Build and return the window
        for (int i = left + 1; i < right; i++) {
            result.add(arr[i]);
        }
        
        return result;
    }
}

//Find closest element using binary search to find mid, then we check leftmost and rightmost index using two pointer and sliding window and then put those element in list
/*class Solution {
    int[] arr;
    int x;
    public int getClosestElement(){
      int left = 0;
        int right = this.arr.length - 1;
        int mid = 0;
        while (left <= right) {
            mid = left + (right-left) / 2;
            if (mid-1>=0&&Math.abs(this.arr[mid-1]- x)<Math.abs(this.arr[mid]- x)) {
                right = mid - 1;
            } else if (mid+1<this.arr.length&&Math.abs(this.arr[mid+1]- x)<Math.abs(this.arr[mid]- x)) {
                left = mid + 1;
            } else {
                break;
            }
        }
        
        return mid;
    }
    public List<Integer> findClosestElements(int[] arr, int k, int x) {
     
        this.arr=arr;
        this.x=x;
        int closestElementIndex=getClosestElement();
        System.out.println(closestElementIndex);
        int left=closestElementIndex;
        int right=closestElementIndex;
        List<Integer> answer=new ArrayList<Integer>();
        while(Math.abs(right-left)+1<=k){
           
       //     System.out.println("left: "+left+" right: "+right);
            if(left-1>=0&&right+1<arr.length){
                
                if(Math.abs(arr[left-1]-x)<=Math.abs(arr[right+1]-x)){
                left--;

            }else{
                right++;

            }
                
            }else if(left-1>=0){
                left--;
                
                
            }else if(right+1<arr.length){
                right++;
                
            }else{
                break;
            }
        }
        

        if(Math.abs(right-left)+1>k){
            
            if(Math.abs(arr[left]-x)<=Math.abs(arr[right]-x)){
                
                   for(int i=left;i<right;i++){
            answer.add(arr[i]);
        }
                
            }
            
             if(Math.abs(arr[left]-x)>Math.abs(arr[right]-x)){
                
                   for(int i=left+1;i<=right;i++){
                   answer.add(arr[i]);
                }
                
            }
         
        }
        
         if(Math.abs(right-left)+1<=k){
            for(int i=left;i<=right;i++){
            answer.add(arr[i]);
        }
        }
        System.out.println("left: "+left+" right: "+right);
        return answer;
    }
}*/
