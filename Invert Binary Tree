/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public TreeNode invertTreeHelper(TreeNode root) {
        
        if(root == null) {
            return null;
        }
        
        TreeNode leftSide = invertTreeHelper(root.left);
        TreeNode rightSide = invertTreeHelper(root.right);
        
        root.left = rightSide;
        root.right = leftSide;
        
        return root;
        
    }
    public TreeNode invertTree(TreeNode root) {
        
        return invertTreeHelper(root);
    }
}

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
 
 /*
 Simple swap nodes at postoder traversal
 
 */
class Solution {
    
    public void invertTreeHelper(TreeNode root){
        if(root==null){
            return;
        }
        invertTreeHelper(root.left);
          invertTreeHelper(root.right);
        
        TreeNode tempLinkToBranch=root.left;
        root.left=root.right;
        root.right=tempLinkToBranch;
        
    }
    public TreeNode invertTree(TreeNode root) {
        invertTreeHelper(root);
        return root;
        
    }
}
