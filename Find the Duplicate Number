class Solution {
    
    //solution1 : modify the array and mark visited index with negative
    public int findDuplicate(int[] nums) {
        
        for(int i=0; i< nums.length; i++) {
            
            int index = Math.abs(nums[i]);
            if(nums[index] < 0 ) {
                return Math.abs(nums[i]);
            }
            
            nums[index] = -1 *nums[index];
            
        }
        
        return -1;
    }
}
/*
we know that numbers in the array ar between 1 ro num.length
lets say a number is repeated that means if we ,mark that number index negative indicating it visited and we visit it again that means we saw this number twice.

nums[i]=2 that means number 2 represents index 2.
*/
// Using modification
/*class Solution {
    public int findDuplicate(int[] nums) {
        
        for(int i=0;i<nums.length;i++){
            int index=Math.abs(nums[i]);
            if(nums[index]<0){
                return Math.abs(nums[i]);
            }else{
                nums[index]=-nums[index];
            }
            
        }
        return -1;
   
    }
}*/
// Using no modification using tortise linklist cycle finder
class Solution {
    public int findDuplicate(int[] nums) {
        
  int slow = nums[0];
    int fast = nums[0];
    do
    {
        slow = nums[slow];
        fast = nums[nums[fast]];
    } while (slow != fast);
 
    // Find the "entrance"
    // to the cycle.
    int ptr1 = nums[0];
    int ptr2 = slow;
    while (ptr1 != ptr2)
    {
        ptr1 = nums[ptr1];
        ptr2 = nums[ptr2];
    }
 
    return ptr1;
   
    }
}
