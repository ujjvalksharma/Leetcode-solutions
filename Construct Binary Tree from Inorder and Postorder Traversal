/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int postOrderIndex = 0;
    Map<Integer,Integer> nodeToIndex = new HashMap<>();
    public TreeNode buildTreeHelper(int[] inorder, int[] postorder, int start, int end) {
        if(start > end) {
            return null;
        }
        int value = postorder[postOrderIndex];
        //int idx = binarySearch(inorder, start, end, value);
        int idx = nodeToIndex.get(value);
        TreeNode root = new TreeNode(value);
        postOrderIndex--;
        root.right = buildTreeHelper(inorder, postorder, idx + 1, end);
        root.left = buildTreeHelper(inorder, postorder, start, idx - 1);
        return root;
    }

    // public int binarySearch(int[] inorder, int start, int end, int target) {
    //     // full search
    //     for(int i = 0; i < inorder.length; i++) {
    //         if(inorder[i] == target) {
    //             return i;
    //         }
    //     }
    //     return -1;
    // }
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        postOrderIndex = postorder.length - 1;
        for(int i = 0; i < inorder.length; i++) {
            nodeToIndex.put(inorder[i], i);
        }
        return buildTreeHelper(inorder, postorder, 0, inorder.length - 1);
    }
}
