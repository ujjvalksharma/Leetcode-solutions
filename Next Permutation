import java.util.*;

class Solution {
    public void nextPermutation(int[] nums) {
        if (nums.length == 1) {
            return;
        }

        int index1 = -1;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {  // Fix: Compare with the next element instead of using `prev`
                index1 = i;
                break;
            }
        }

        if (index1 == -1) {
            reverse(nums, 0, nums.length - 1);
            return;
        }

        int index2 = -1;
        for (int i = nums.length - 1; i > index1; i--) {
            if (nums[i] > nums[index1]) {
                index2 = i;
                break;
            }
        }

        swap(index1, index2, nums);
        reverse(nums, index1 + 1, nums.length - 1); // Fix: Reverse instead of sorting
    }

    public void swap(int index1, int index2, int[] nums) {
        int temp = nums[index2];
        nums[index2] = nums[index1];
        nums[index1] = temp;
    }

    public void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(start, end, nums);
            start++;
            end--;
        }
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] nums = {1, 2, 3};
        sol.nextPermutation(nums);
        System.out.println(Arrays.toString(nums)); // Output: [1, 3, 2]
    }
}


/*

For next permutation: we always see right to left as we want to make swaps towards the right to reach next permutation
Case 1: the whole number is increasing right to left, so this last number, we can just reverse/sort nums and that is the result

Case2: 
iterate from right to left check the index at which order stops becoming increasing
    b
   /\c
  /  \
 /
a

We can see that from a to b it was increasing that means its permutation has been completed, since b to c where c is at index start is not increasing, we should find next Greater number to replace c and that number is between a to b. We find the next greater number and put the rest nunbers between a to b in sorted order from start + 1 to nums.length - 1

*/
/*
class Solution {
    public void nextPermutation(int[] nums) {
        
        int index = -1;
        for(int i=nums.length - 2; i >= 0; i--) {
            
            if(nums[i] < nums[i + 1]) {
                index = i;
                break;
            }
        }
        
        if(index == -1) { //nums is the last number in permutation
            Arrays.sort(nums); //conver it to first number
            return;
        } else {
            
        TreeMap<Integer,Integer> tm = new TreeMap<>();
        
        for(int i=index; i<nums.length; i++) {
            
            if(!tm.containsKey(nums[i])) {
                tm.put(nums[i], 0);
            }
            
            tm.put(nums[i], tm.get(nums[i]) + 1);
            
        }
            
            Integer nextNum = tm.higherKey(nums[index]);
            
            int start = index;
            tm.put(nextNum, tm.get(nextNum) - 1);
            nums[index] = nextNum;
            start++;
            
            for(int num : tm.keySet()) {
                
                int count = tm.get(num);
                
                while(count > 0) {
                    nums[start] = num;
                    start++;
                    count--;
                }
            }
        }
    }
}*/
 

class Solution {
    
    public void reverse(int[] nums, int start, int end) {
        
        while(start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
    
    public void swap(int[] nums, int i, int j) {
            int temp = nums[i];
            nums[i] = nums[j];
            nums[j] = temp;
    }
    
    
    public void nextPermutation(int[] nums) {
        
        int index = -1;
        for(int i=nums.length - 2; i >= 0; i--) {
            
            if(nums[i] < nums[i + 1]) {
                index = i;
                break;
            }
        }
        
        if(index == -1) { //nums is the last number in permutation
            reverse(nums, 0, nums.length - 1);
            return;
        } else {
        
            int swapIndex = index;
            for(int i=index + 1; i<nums.length; i++) {
                
                if(nums[i] > nums[index]) {
                    swapIndex = i;
                }
            }
            
            swap(nums, index, swapIndex);
            
            reverse(nums, index + 1, nums.length - 1);
        }
    }
}




public class Solution {
    /*
    https://www.youtube.com/watch?v=quAS1iydq7U
    take an example of 62|1|5430 ------> 62|3|5430 swap 1 and 3        -------->62|3|0145 reverse after swapping from 3 new position
    
    Note in permutation: we choose a smaller element before larger to form a increasing sequence.
    
    lets say we start from right to left for example 5430 we know that 5>4>3>0 this means we are having greater element at left position only when it has already chosen a smaller element before.
    
    62|1|5430
    However, we we meet 1 from right to left we see that 1 is smaller that its next element that means in
    1 search space there is possibility of a larger element which we can check from end as smaller numbers would be from end. 
    
    After replacing 1 with 3 we see that 62|3|5410. we should reverse after 3 as smaller numbers should before to form a small number.
    
    */
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        while (i >= 0 && nums[i] >= nums[i+1]) {
            i--;
        }
        if (i >= 0) {
            int j = nums.length - 1;
            while (j >= 0 && nums[j] <= nums[i]) {
                j--;
            }
            swap(nums, i, j);
        }
        reverse(nums, i + 1);
    }

    private void reverse(int[] nums, int start) {
        int i = start, j = nums.length - 1;
        while (i < j) {
            swap(nums, i, j);
            i++;
            j--;
        }
    }

    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}
