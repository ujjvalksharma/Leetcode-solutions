/*

in a circle we split the into groups by selecting 2 pairs, 1 group is above the pair and 1 group below the pair so if we have 10 people then pair would be numberOfWays(0)*numberOfWays(8) + numberOfWays(2)*numberOfWays(6) + numberOfWays(4)*numberOfWays(4) + + numberOfWays(6)*numberOfWays(2) + numberOfWays(8)*numberOfWays(0) 


*/
class Solution {
    long mod=1000000007;
    public long trav(int n,long dp[])
    {
        if(n%2==1)
            return 0;
        if(dp[n]!=0)
            return dp[n];
        long ans=0;
        for(int i=2;i<=n;i++)
        {
            long p=trav(i-2,dp);
            long m=trav(n-i,dp);
            long y=((p%mod)*(m%mod))%mod;
            ans=(ans%mod+y%mod)%mod;
        }
        return dp[n]=ans;
    }
    public int numberOfWays(int n) {
        long dp[]=new long[n+1];
        dp[0]=1;
        return (int)(trav(n,dp)%mod);
    }
}

/*

Lets say the 10 can be split in groups of 8-2, 6-4, 4-6, 2-8

numberOfWays(10) = 42
*/
