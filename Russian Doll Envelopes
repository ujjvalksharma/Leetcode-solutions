//sort element by weight, so we know that weight is increasing
// then we just need heights in increasing order, so now we cal longest increasing subsequence on height array to find the longest increasing subsequence of heights while weights are increasing.
class Solution {

    public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];
        int len = 0;
        for (int num : nums) {
            int i = Arrays.binarySearch(dp, 0, len, num);
            if (i < 0) {
                i = -(i + 1);
            }
            dp[i] = num;
            if (i == len) {
                len++;
            }
        }
        return len;
    }

    public int maxEnvelopes(int[][] envelopes) {
        // sort on increasing in first dimension and decreasing in second
        Arrays.sort(envelopes, new Comparator<int[]>() {
            public int compare(int[] arr1, int[] arr2) {
                if (arr1[0] == arr2[0]) {
                    return arr2[1] - arr1[1]; //desceing of height
                } else {
                    return arr1[0] - arr2[0]; //ascening of weight
                }
           }
        });
        // extract the second dimension and run LIS
        int[] secondDim = new int[envelopes.length];
        for (int i = 0; i < envelopes.length; ++i){
            secondDim[i] = envelopes[i][1];
        } 
        return lengthOfLIS(secondDim);
    }
}
