/*
We can use binary search on list of values of timestamp as timestamp arrives in increasing order.
We can also use treeset to get floor/ceiling values.

*/
    
    
    
class TimeMap {

    /** Initialize your data structure here. */
    
    HashMap<String,List<String[]>> map;
    public TimeMap() {
        map=new HashMap<String,List<String[]>>();
    }
    
    public void set(String key, String value, int timestamp) {
        
        if(!map.containsKey(key)){
            map.put(key,new ArrayList<String[]>());
        }
        map.get(key).add(new String[]{value,""+timestamp});
    }
    
    public String get(String key, int timestamp) {
      
        if(!map.containsKey(key)){
            return "";
        }
        List<String[]> values=map.get(key);
        
        int low=0;
        int high=values.size()-1;
        String finalValue="";
        while(low<=high){
            
            int mid=low+(high-low)/2;
            String[] value=values.get(mid);
            
            if(Integer.parseInt(value[1])<=timestamp){
                finalValue=value[0];
                low=mid+1;
            }else{
                high=mid-1;
            }
        }
        
        return finalValue;
    }
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */
