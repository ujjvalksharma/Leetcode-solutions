/*
// Merge sort
 class Solution {
    
    public void mergeArr(int left, int mid, int right,int[] nums){
       
        int leftArr[]=new int[mid-left+1];
        int rightArr[]=new int[right-(mid+1)+1];
    //    int mergedArr[]=new int[right-left+1];
        int index=0;
        for(int i=left;i<=mid;i++){
            leftArr[index]=nums[i];
            index++;
        }
        index=0;
         for(int i=mid+1;i<=right;i++){
            rightArr[index]=nums[i];
             index++;
        }
        //merge two sorted array
        
        int leftArrIndex=0;
        int rightArrIndex=0;
    //    int index=0;
        
        while(leftArrIndex<leftArr.length&&
             rightArrIndex<rightArr.length){
            if(leftArr[leftArrIndex]<=rightArr[rightArrIndex]){
                nums[left]=leftArr[leftArrIndex];
                leftArrIndex++;
            }else{
                  nums[left]=rightArr[rightArrIndex];
                rightArrIndex++;
            }
            left++;
        }
        
        while(leftArrIndex<leftArr.length){
             nums[left]=leftArr[leftArrIndex];
             left++;
            leftArrIndex++;
        }
        
          while(rightArrIndex<rightArr.length){
              nums[left]=rightArr[rightArrIndex];
             left++;
             rightArrIndex++;
        }
        
   /*     for(int i=0;i<mergedArr.length;i++){
            nums[left]=mergedArr[i];
            left++;
        }
       */ 
    }
    public void sortArrayHelper(int left,int right,int[] nums){
       
        if(left>=right){
            return;
        }
        if(right-left==1){
            int min=Math.min(nums[left],nums[right]);
            int max=Math.max(nums[left],nums[right]);
            nums[left]=min;
            nums[right]=max;
            return;
        }
        int mid=left+(right-left)/2;
        System.out.println(" left: "+left+" mid: "+mid+" right: "+right);
        sortArrayHelper(left,mid,nums);
        sortArrayHelper(mid+1,right,nums);
        mergeArr(left,mid,right,nums);
        
       
    }
    public int[] sortArray(int[] nums) {
        
        sortArrayHelper(0,nums.length-1,nums);
        return nums;
        
    }
}
*/
/*
class Solution {
    
    public int partition(int[] nums, int l, int h){
        
        int pivot=nums[l];
        int i=l;
        int j=h;
        
        while(i<j){
            
            while(i<=h&&nums[i]<=pivot){
                i++;
            }
            
               while(j>=l && nums[j]>pivot){
                j--;
            }
            
            if(i<j){
                swap(nums,i,j);
            }
        }
          swap(nums,j,l);
        return j;
    }
    
    public void swap(int[] nums, int i,int j){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    
    public void quickSort(int[] nums, int l, int h){
        
       
    if (l < h)
    {
        int pi = partition(nums, l, h);
        quickSort(nums, l, pi - 1);
        quickSort(nums, pi + 1, h);
    }
        
    }
    public int[] sortArray(int[] nums) {
     
        quickSort(nums,0,nums.length-1);
        return nums;
    }
}
*/
// heap sort
class Solution {
    
   void heapify(int arr[], int n, int i)
    {
        int largest = i; // Initialize largest as root
        int l = 2 * i + 1; // left = 2*i + 1
        int r = 2 * i + 2; // right = 2*i + 2
 
        // If left child is larger than root
        if (l < n && arr[l] > arr[largest])
            largest = l;
 
        // If right child is larger than largest so far
        if (r < n && arr[r] > arr[largest])
            largest = r;
 
        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;
 
            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }
    }
    public int[] sortArray(int[] nums) {
        
     int n = nums.length;
 
        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(nums, n, i);
 
        // One by one extract an element from heap
        for (int i = n - 1; i > 0; i--) {
            // Move current root to end
            int temp = nums[0];
            nums[0] = nums[i];
            nums[i] = temp;
 
            // call max heapify on the reduced heap
            heapify(nums, i, 0);
        }
        return nums;
    }
}
