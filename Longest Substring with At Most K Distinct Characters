class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        
        int start = 0;
        int end = 0;
        Map<Character,Integer> map = new HashMap<>();
        int longestSubString = 0;
        while(end < s.length()) {
            
            char c = s.charAt(end);
            
            if(!map.containsKey(c)) {
                map.put(c, 0);
            }
            
            map.put(c, map.get(c) + 1);
            
            if(map.size() > k) {
                
                while(start <= end && map.size() > k ) {
                    
                    char c1 = s.charAt(start);
                    map.put(c1, map.get(c1) - 1);
                    
                    if(map.get(c1) == 0) {
                        map.remove(c1);
                    }
                    
                    start++;
                }
            }
            
            longestSubString = Math.max(longestSubString, (end - start + 1));
            
            end++;
            
            
        }
        
        return longestSubString;
    }
}
class Solution {
    /*
    Acquire and release character using 2 pointer + hashmap.
    
    keep a track of hashmap size if greater than k then keep releasing character from start till you don't reach a hashmap size of k else acquire character from end.
    
    */
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        
        int start=0;
        int end=0;
        int sizeOfS=s.length();
        HashMap<Character,Integer> hmCharToCount=new HashMap<>();
        int maxLengthOFkDistinct=0;
        while(end<sizeOfS){
            
            if(!hmCharToCount.containsKey(s.charAt(end))){
                hmCharToCount.put(s.charAt(end),0);
            }
            hmCharToCount.put(s.charAt(end),hmCharToCount.get(s.charAt(end))+1);
            
            while(hmCharToCount.size()>k){
                
                
                if(hmCharToCount.containsKey(s.charAt(start))){
                    hmCharToCount.put(s.charAt(start),hmCharToCount.get(s.charAt(start))-1);
                    if(hmCharToCount.get(s.charAt(start))==0){
                        hmCharToCount.remove(s.charAt(start));
                    }
                }
                
               
                start++;
            }
             if(hmCharToCount.size()<=k){
            maxLengthOFkDistinct= Math.max(maxLengthOFkDistinct,end-start+1);
                }
                
                end++;
            
        }
        return maxLengthOFkDistinct;
    }
}
