class Solution {
      
public double[] medianSlidingWindow(int[] nums, int k) {
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        // use Collections.reverseOrder() in order to prevent integer overflow
        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
        double[] result = new double[nums.length - k + 1];
        
        int start = 0;
        for (int end = 0; end < nums.length; end++) {
            maxHeap.add(nums[end]);
            
            if (!maxHeap.isEmpty() && !minHeap.isEmpty() && maxHeap.peek() > minHeap.peek()) {
                minHeap.add(maxHeap.poll());
            }
            
            if (maxHeap.size() - minHeap.size() > 1) {
                minHeap.add(maxHeap.poll());
            }
            
            if (minHeap.size() - maxHeap.size() > 1) {
                maxHeap.add(minHeap.poll());
            }
            
            if (end - start + 1 >= k) {
                if (k % 2 == 0) {
                    result[start] = ((long)maxHeap.peek() + (long)minHeap.peek()) / 2.0;
                }
                 else if (maxHeap.size() > minHeap.size()) {
                    result[start] = maxHeap.peek() * 1.0;
                } else {
                    result[start] = minHeap.peek() * 1.0;
                }
                
                if (nums[start] > maxHeap.peek()) {
                    minHeap.remove(nums[start]);
                } else {
                    maxHeap.remove(nums[start]);
                }
                
                start++;
            } 
            
        }
        
        return result;
        
    }
}
