class MinStack {

    Stack<int[]> stk;
    public MinStack() {
        this.stk = new Stack<int[]>();
    }
    
    public void push(int val) {
        
        if(this.stk.isEmpty()) {
            this.stk.push(new int[]{val,val});
        } else {
           this.stk.push(new int[]{val,Math.min(val, stk.peek()[1])}); 
        }
    }
    
    public void pop() {
        stk.pop();
    }
    
    public int top() {
        return stk.peek()[0];
    }
    
    public int getMin() {
        return stk.peek()[1];
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
class MinStack {
/*
Keep the a object of StackElement in stack that has track of current element and min element in the stack till date encountered.

*/
    class StackElement{

        int num;
        int min;
        StackElement(int num,int min){
            this.num=num;
            this.min=min;
        }
    }
    Stack<StackElement> stk=new Stack<StackElement>();
    /** initialize your data structure here. */
    public MinStack() {
        
    }
    
    public void push(int x) {
        if(stk.isEmpty()){
            stk.push(new StackElement(x,x));
        }else{
             stk.push(new StackElement(x,Math.min(x,stk.peek().min)));
        }
        
    }
    
    public void pop() {
      
        stk.pop();
            
        
    }
    
    public int top() {
        return stk.peek().num;
        
    }
    
    public int getMin() {
        
        return stk.peek().min;
        
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
