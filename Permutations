class Solution {
    
    List<List<Integer>> output=new ArrayList<>();
    
  public void backtrack(List<Integer> nums,int first) {
    // if all integers are used up
    if (first >= nums.size()){
      output.add(new ArrayList<Integer>(nums)); //leaf nodes will have all the numbers
    }
      
    for (int i = first; i < nums.size(); i++) {
      Collections.swap(nums, first, i);
      backtrack(nums, first + 1);
      Collections.swap(nums, first, i);
    }
      
  }

  public List<List<Integer>> permute(int[] nums) {

    List<Integer> numsList = new ArrayList<Integer>();
    for (int num : nums){
      numsList.add(num);
    }

    int n = nums.length;
    backtrack(numsList, 0);
    return output;
  }
}
