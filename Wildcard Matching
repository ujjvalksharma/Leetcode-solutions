//There are better solutions than mine
//memorization + recursion
class Solution {
    
    int sizeP;
    int sizeS;
    String s;
    String p;
    HashMap<String,Boolean> dp=new HashMap<String,Boolean>();
    public boolean isMatchHelper(int indexS, int indexP){
        
         if(indexS>=this.sizeS&&containsOnlyStart(indexP) ){
            return true;
        }
        
          if(indexS>=this.sizeS&&indexP>=this.sizeP){
            return true;
        }
        

        if(indexS>=this.sizeS||indexP>=this.sizeP){
            return false;
        }
        String key=indexS+","+indexP;
        if(dp.containsKey(key)){
            return dp.get(key);
        }
        
        boolean isMatchFound=false;
        if(p.charAt(indexP)=='?'){
            
            isMatchFound=isMatchFound|isMatchHelper(indexS+1,indexP+1);
            
        }else if(p.charAt(indexP)=='*'){
            for(int i=indexS;i<=sizeS;i++){
             isMatchFound=isMatchFound|isMatchHelper(i,indexP+1);   
            }
        }else{
            if(this.s.charAt(indexS)==this.p.charAt(indexP)){
                isMatchFound=isMatchFound|isMatchHelper(indexS+1,indexP+1);
            }else{
                return false;
            }
        }
        
        dp.put(key,isMatchFound);
        return isMatchFound;
        
    }
    public boolean isMatch(String s, String p) {

        this.sizeP=p.length();
        this.sizeS=s.length();
        this.s=s;
        this.p=p;

        return isMatchHelper(0,0);
    }
    
    public boolean containsOnlyStart(int index){
        
        for(int i=index;i<this.p.length();i++){
            if(this.p.charAt(i)!='*'){
                return false;
            }
        }
        return true;
    }
}
