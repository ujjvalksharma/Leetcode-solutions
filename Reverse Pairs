/*

 0 1 2 3 4
[1,3,2,3,1]

 0->0
 1->1
 2->0
 3->1
 4->0
 
 
                    
                    [1,3,2,3,1]
                    
            [1,2,3]             [1,3]
            
        [1,3]      [2]       [3]     [1]
      
      [1]   [3]
      
      While do doing merge sort we know it is like a post order traversal and left array index is less than right array index and left array values are less than right array values, so we just compare two sorted array to find nums[i] > 2 * nums[j] in O(n) for log N in time complexity nlogn
*/
class Solution {
    int count = 0;
    public int reversePairs(int[] nums) {
        long n[] = new long[nums.length];
        int z =0 ;
        for(int i : nums){
            n[z++] = i;
        }
        mSort(n,0,nums.length-1);
        return count;
    }
    long[] mSort(long n[],int s, int e) {
        if(s == e) {
            return new long[]{n[s]};
        }
        int mid = (s+e)/2;
        long b[] = mSort(n,s,mid);
        long c[] = mSort(n,mid+1,e);
        int i=0,j=0;
        while(j<c.length) {
            while(i<b.length && b[i] <= 2*c[j]){
                i++;
            }
            count+=(b.length - i);
            j++;
        }
        
        n = merge(b,c);
        return n;
    }
    long [] merge(long b[],long c[]){
        long t[]= new long[b.length+c.length];
        int i=0;
        int j=0;
        int z = 0;
        while(i<b.length && j<c.length){
            if(b[i] <= c[j]){
                t[z++] = b[i++];
            } else if(b[i] > c[j]) {
                t[z++] = c[j++];
            }
        }
        while(i<b.length){
            t[z++] = b[i++];
        }
        while(j<c.length) {
            t[z++] = c[j++];
        }
        return t;
    }    
}
//My solution modified version of merge sort
/*class Solution {
    Num[] myNums;
    int[] reversePairCount;
    class Num{
        int index;
        int value;
        Num(int index, int value){
            
            this.value=value;
            this.index=index;
        }
        
    }
    
    private void merge(int l, int mid, int h){
        Num[] left=new Num[mid-l+1];
        Num[] right=new Num[(h-(mid+1))];
        
        for(int i=l;i<=mid;i++){
            left[i]=myNums[i];
        }
        
         for(int i=mid+1;i<h;i++){
            right[i]=myNums[i];
        }
        
        int index1=0;
        int index2=0;
        
        while(index1<left.length){
            
            while(index2<right.length
                  &&left[index1].value>(2*right[index2].value)){
                index2++;
            }
            reversePairCount[left[index1].index]+=index2;
            
        }
        
         index1=0;
         index2=0;
        int index=l;
        while(index1<left.length&&index2<right.length){
            
            if(left[index1].value<=right[index2].value){
                myNums[index]=left[index1];
                index1++;
            }else{
                myNums[index]=right[index2];
                index2++;
            }
            index++;
        }
        
        while(index1<left.length){
           
            myNums[index]=left[index1];
            reversePairCount[left[index1].index]+=right.length;
            index1++;
            index++;
        }
        
         while(index2<right.length){
          
            myNums[index]=right[index2];
            index2++;
            index++;
        }
        
    }
    private void divide(int l, int h){
        if(l>=h){
            return;
        }
        int mid=l+(h-l)/2;
        divide(l,mid);
        divide(mid+1,h);
        merge(l,mid,h);
    }
    public int reversePairs(int[] nums) {
        
        this.myNums=new Num[nums.length];
        this.reversePairCount=new int[nums.length];
        
        for(int i=0;i<nums.length;i++){
            myNums[i]=new Num(i,nums[i]);
        }
        
        divide(0,nums.length-1);
        int count=0;
        
        for(int reversePair: reversePairCount){
            count+=reversePair;
        }
        return count;
    }
}
*/
