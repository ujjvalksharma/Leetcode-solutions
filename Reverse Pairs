/*

 0 1 2 3 4
[1,3,2,3,1]

 0->0
 1->1
 2->0
 3->1
 4->0
 
 
                    
                    [1,3,2,3,1]
                    
            [1,2,3]             [1,3]
            
        [1,3]      [2]       [3]     [1]
      
      [1]   [3]
      
      While do doing merge sort we know it is like a post order traversal and left array index is less than right array index and left array values are less than right array values, so we just compare two sorted array to find nums[i] > 2 * nums[j] in O(n) for log N in time complexity nlogn
*/
class Solution {
    
     int totalReversePairs=0;
    
    public void reversePairsHelper(long[] nums, int left, int right){
        
        if(left>=right){
            return;
        }
        int mid=left+(right-left)/2;
        
        reversePairsHelper(nums,left,mid);
        reversePairsHelper(nums,mid+1,right);
        countReverseNumbers(nums,left,mid,right);
        
    }
    
    public void countReverseNumbers(long[] nums, int left,int mid ,int right){
        
        long[] leftArr=new long[mid-left+1];
        long[] rightArr=new long[right-(mid+1)+1];
        long[] mergedArr= new long[right-left+1];
        int index=0;
        for(int i=left;i<=mid;i++){
           leftArr[index]= nums[i];
            index++;
        }
        
        index=0;
        for(int i=mid+1;i<=right;i++){
           rightArr[index]= nums[i];
              index++;
        }
        
        int index1=0;
        int index2=0;
        index=0;
        
      while(index2<rightArr.length) {
            while(index1<leftArr.length && leftArr[index1] <= 2*rightArr[index2]){
                index1++;
            }
            totalReversePairs+=(leftArr.length-1 - index1)+1;
            index2++;
        }
        index1=0;
        index2=0;

        while(index1<leftArr.length&&index2<rightArr.length){
            
            if(leftArr[index1]<=rightArr[index2]){
                mergedArr[index]=leftArr[index1];
                index1++;
            }else{
                  mergedArr[index]=rightArr[index2];
                index2++;
            }
            index++;
        }
        
        while(index1<leftArr.length){
             mergedArr[index]=leftArr[index1];
            index1++;
            index++;
        }
        
           while(index2<rightArr.length){
            mergedArr[index]=rightArr[index2];
            index2++;
            index++;
        }
        
        
        index=left;
        for(int i=0;i<mergedArr.length;i++){
            nums[index]=mergedArr[i];
            index++;
        }
     //   System.out.println("mergedArr: "+Arrays.toString(mergedArr));
       //     System.out.println("----------------------");
    }
    public int reversePairs(int[] nums) {
        
        long[] longOfNums=new long[nums.length];
        
        for(int i=0;i<nums.length;i++){
            longOfNums[i]=nums[i];
        }
       reversePairsHelper(longOfNums,0,nums.length-1);
        
        return totalReversePairs;
    }
}


/*
 0,1,2,3,4
[1,3,2,3,1]

[1,3,2]  [3,1]

[1,3] [2] [3] [1]

[1] [3]



*/
