class Solution {
    
    int[][] dirs = new int[][]{{-1,1},{1,-1},{1,1},{-1,-1},{0,1},{1,0},{-1,0},{0,-1}};
    
    public int getNumberOfOnesNeighbours(int[][] board, int x, int y) {
        
        int onesCount = 0;
        
        for(int[] dir : dirs) {
            int newX = x + dir[0];
            int newY = y + dir[1];
            
            if(newX >= 0 && newY >= 0 && newX < board.length && newY < board[0].length && (board[newX][newY] == 1 || board[newX][newY] == 3)) {
                onesCount++;
            }
        }
        
        return onesCount;
    }
    public void gameOfLife(int[][] board) {

        for(int i=0; i<board.length;i++) {
            for(int j=0; j<board[0].length; j++) {
                int numberOfOnesNeighbours = getNumberOfOnesNeighbours(board, i, j);
                if(board[i][j] == 1 && numberOfOnesNeighbours < 2) {
                    board[i][j] = 3;
                }
                
                if(board[i][j] == 1 && numberOfOnesNeighbours > 3) {
                    board[i][j] = 3;
                }
                
                if(board[i][j] == 0 && numberOfOnesNeighbours == 3) {
                    board[i][j] = 2;
                }
            }
        }
        
        for(int i=0; i<board.length; i++) {
            for(int j=0;j<board[0].length; j++) {
                
                if(board[i][j] == 2) {
                   board[i][j] = 1; 
                }
                
                if(board[i][j] == 3) {
                   board[i][j] = 0;  
                }
            }
        }
    }
}
/*
0
1
let say we introduce new numbers to mark change
2 -> newstate : 1 and oldstate : 0
3 -> newstate : 0 and oldstate : 1



*/


// if dead comes dead : 0
// 2--> alive becomes dead -1
//alive becomes alive : 1
//dead becomes alive 2
/*
The idea is to maintain 4 variables to keep track of the below four states:

// if dead comes dead : 0
// 2--> alive becomes dead -1
//alive becomes alive : 1
//dead becomes alive 2

so, if we see a value, then we can know the previous state and current states and calcuate the dead and alive points for current cell manipulation

*/
class Solution {
    int[][] board;
   private boolean isValidCoor(int x, int y){
       
       if(x<0||y<0||x>=board.length||y>=board[0].length){
           return false;
       }
       return true;
   }
    public void gameOfLife(int[][] board) {
        
        this.board=board;
        int[][] dir=new int[][]{{1,0},{-1,0},{0,1},{0,-1},{-1,1},{1,1},{-1,-1},{1,-1}};
        for(int i=0;i<board.length;i++){
            
            for(int j=0;j<board[0].length;j++){
                
                int deadPoints=0;
                int alivePoints=0;
                for(int k=0;k<dir.length;k++){
                    int newX=i+dir[k][0];
                    int newY=j+dir[k][1];
                    if(isValidCoor(newX,newY)){
                        
                        if(board[newX][newY]==2||board[newX][newY]==0){
                            deadPoints++;
                        }
                        else if(board[newX][newY]==-1
                                 ||board[newX][newY]==1){
                            alivePoints++;
                    }
                        
                }
                    
                    
            }
                //curr cell is alive
                if(board[i][j]==1){
                    if(alivePoints<2||alivePoints>3){
                        board[i][j]=-1;
                    }
                    
                }else if(board[i][j]==0){//curr cell is dead
                    
                      if(alivePoints==3){
                        board[i][j]=2;
                    }
                    
                }
        }
            
        }
        
               for(int i=0;i<board.length;i++){
            
            for(int j=0;j<board[0].length;j++){
                
                if(board[i][j]>0){
                    board[i][j]=1;
                }else{
                    board[i][j]=0;
                }
                
                
            }
                   
               }
        
    }
}
