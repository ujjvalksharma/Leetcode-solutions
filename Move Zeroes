class Solution {
    /**
    Shift element to the start, so all the zeros automatically move behind
    
    **/
    private int findFirstZeroThIndex(int[] nums) {
        
        for(int i=0; i<nums.length; i++) {
            if(nums[i] == 0) {
                return i;
            }
        }
        
        return -1;
    }
    
    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    public void moveZeroes(int[] nums) {
        
        int pointerToZeroIndex = Integer.MAX_VALUE;
        pointerToZeroIndex = findFirstZeroThIndex(nums);
        if(pointerToZeroIndex == -1) {
            return;
        }
        int start = 0;
        for(int i=0; i < nums.length; i++) {
            if(nums[i] != 0){
                swap(nums,i,start);
                start++;
            }
        }
        
        
    }
}




class Solution {
    
    public int findFirstZeroIndex(int[] nums) {
        
        for(int i=0; i<nums.length; i++) {
            if(nums[i] == 0) {
                return i;
            }
        }
        
        return Integer.MAX_VALUE;
    }
    
    public int findNextZeroIndex(int[] nums, int lastZeroIndex) {
        
        for(int i=lastZeroIndex + 1; i < nums.length; i++) {
            if(nums[i] == 0) {
                return i;
            }
        }
        
        return Integer.MAX_VALUE;
    }
    public void moveZeroes(int[] nums) {
        
        int lastZeroIndex = findFirstZeroIndex(nums);
        
        for(int i=0; i<nums.length; i++) {
            
            if(nums[i] != 0) {
                
                if(lastZeroIndex < i) {
                    nums[lastZeroIndex] = nums[i];
                    nums[i] = 0;
                    lastZeroIndex = findNextZeroIndex(nums, lastZeroIndex);
                }
                
            }
        }
        
    }
}
