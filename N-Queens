class Solution {
    
    List<List<String>> result = new ArrayList<>();
    Set<String> visitedResult = new HashSet<>();
    
    public List<String> boardToString(char[][] board) {
        
        List<String> innerResult = new ArrayList<>();

        for(int i=0; i<board.length; i++) {
            StringBuilder sb = new StringBuilder("");
            for(int j=0; j<board[0].length; j++) {
                sb.append(board[i][j]);
            }
            innerResult.add(sb.toString());
        }
        
        return innerResult;
    }
    
        public boolean isSafe(char[][] matrix, int x,int y, Set<Integer> visitedRows, Set<Integer> visitedColumn){
        
             if(visitedRows.contains(x)) {
            return false;
        } else if(visitedColumn.contains(y)) {
            return false;
        }
        
            
        //left diagonal
        for(int i=x-1,j=y-1;i>=0 && j>=0 ; i--,j--){
            if(matrix[i][j] == 'Q'){
                return false;
            }
        }
        
        //right diagonal
        for(int i=x-1,j=y+1;i >=0 && j < matrix[0].length; i--, j++){
            if(matrix[i][j] == 'Q'){
                return false;
            }
        }
        return true;
    }
    
    
    public void solveNQueensHelper(int row, char[][] board, Set<Integer> visitedRows, Set<Integer> visitedColumn, int queenLeft) {
        
        if(row >= board.length && queenLeft == 0) {
            
            List<String> innerResult = boardToString(board);
            result.add(innerResult);
            
            return;
        }
        
        if(row >= board.length) {
            return;
        }
        
        for(int j=0; j<board[0].length; j++) {
            
            if(isSafe(board, row, j, visitedRows, visitedColumn)){
                
                visitedRows.add(row);
                visitedColumn.add(j);
                board[row][j] = 'Q';
                
                solveNQueensHelper(row + 1, board, visitedRows, visitedColumn, queenLeft - 1);
                
                visitedRows.remove(row);
                visitedColumn.remove(j);
                board[row][j] = '.';
                
            }       
        }
        
    } 
    public List<List<String>> solveNQueens(int n) {
        
       char[][] board = new char[n][n];
        
       for(char[] b : board){
           Arrays.fill(b, '.');
       }
        
        solveNQueensHelper(0, board, new HashSet<Integer>(), new HashSet<Integer>(), n);
        return result;
    }
}
