/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    boolean isValid = true;
    public int[] isValidBSTHelper(TreeNode root) {
        if(root == null) {
            return null;
        }

        int rootVal = root.val;
        int[] ranges = new int[]{root.val, root.val};
        int[] leftNode = isValidBSTHelper(root.left);
        int[] rightNode = isValidBSTHelper(root.right);
        if(leftNode != null) {
            if(leftNode[0] >= rootVal || leftNode[1] >= rootVal) {
                isValid = false;
            }
            ranges[0] = Math.min(ranges[0], leftNode[0]);
            ranges[0] = Math.min(ranges[0], leftNode[1]);
            ranges[1] = Math.max(ranges[1], leftNode[0]);
            ranges[1] = Math.max(ranges[1], leftNode[1]);
        }

        if(rightNode != null) {
            if(rightNode[0] <= rootVal || rightNode[1] <= rootVal) {
                isValid = false;
            }
            ranges[0] = Math.min(ranges[0], rightNode[0]);
            ranges[0] = Math.min(ranges[0], rightNode[1]);
            ranges[1] = Math.max(ranges[1], rightNode[0]);
            ranges[1] = Math.max(ranges[1], rightNode[1]);
        }

        return ranges;
    }
    public boolean isValidBST(TreeNode root) {
        isValidBSTHelper(root);
        return isValid;
    }
}


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    boolean isValidBst;
    
    public int[] checkIsBstValid(TreeNode root) {
        
        if(root == null) {
            return new int[]{};
        }
        
        int[] leftSubtree = checkIsBstValid(root.left);
        int[] rightSubtree = checkIsBstValid(root.right);
        
        int[] result = new int[2];
        int minValue = root.val;
        int maxValue = root.val;
        
        if(leftSubtree.length > 1) {
          minValue = Math.min(minValue, Math.min(leftSubtree[0], leftSubtree[1]));  
        }
        
        if(rightSubtree.length > 1) {
          maxValue = Math.max(maxValue, Math.max(rightSubtree[0], rightSubtree[1]));  
        }
        
        if((leftSubtree.length > 1) && (root.val <= leftSubtree[0] || root.val <= leftSubtree[1]) ) {
            isValidBst = false;
        }
        
        if((rightSubtree.length > 1) && (root.val >= rightSubtree[0] || root.val >= rightSubtree[1]) ) {
            isValidBst = false;
        }
        
        
        result[0] = minValue;
        result[1] = maxValue;
        
        return result;
        
    }
    public boolean isValidBST(TreeNode root) {
        
        isValidBst = true;
        
        checkIsBstValid(root);
        
        return isValidBst;
    }
}



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    /*
    Do a post order traversal and keep note of min and max element from left and right subtree and current node value should be less right subtree min and max element and greater and min and max value of left subtree and then it will pass its its min and max to above tree.
    
    **/
    boolean validBst=true;
   public int[] isValidBSTHelper(TreeNode root){
       if(root==null){
           return new int[]{};
       }
       if(root.left==null&&root.right==null){
           return new int[]{root.val,root.val};
       }
       int[] arrfromLeftSubtree=isValidBSTHelper(root.left);
       int[] arrfromRightSubtree=isValidBSTHelper(root.right);
              
       if(arrfromRightSubtree.length==2&&(root.val>=arrfromRightSubtree[0]||root.val>=arrfromRightSubtree[1])){
           validBst=false;
       }  
         if(arrfromLeftSubtree.length==2&&(root.val<=arrfromLeftSubtree[0]||root.val<=arrfromLeftSubtree[1])){
           validBst=false;
       }
       int minimumElement=Integer.MAX_VALUE;
        int maxElement=Integer.MIN_VALUE;
       if(arrfromLeftSubtree.length==2){
           minimumElement=Math.min(root.val,arrfromLeftSubtree[0]);
           maxElement=Math.max(root.val,arrfromLeftSubtree[1]);
       }              
       if(arrfromRightSubtree.length==2){
          minimumElement=Math.min(minimumElement,arrfromRightSubtree[0]);
           maxElement=Math.max(root.val,arrfromRightSubtree[1]);
       }
       return new int[]{minimumElement,maxElement};
        
    }
    public boolean isValidBST(TreeNode root) {
        
        if(root.left==null&&root.right==null){
            return true;
        }
        int arr[]=isValidBSTHelper(root);

        return validBst;
    }

}
