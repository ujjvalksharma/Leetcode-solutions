/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//simple preorder
class Solution {
    
    int longestConsecutiveSequencePath = 1;
    public void longestConsecutiveHelper(TreeNode root, int parentVal, int len) {
        
        if(root == null) {
            return;
        }
        //System.out.println("root: "+root.val+" len: "+len);
        if(parentVal == Integer.MAX_VALUE) {
            longestConsecutiveHelper(root.left, root.val, 1);
            longestConsecutiveHelper(root.right, root.val, 1);
        } else {
            
            if(parentVal + 1 ==  root.val) {
                longestConsecutiveSequencePath = Math.max(longestConsecutiveSequencePath, len + 1);
                longestConsecutiveHelper(root.left, root.val, len + 1);
                longestConsecutiveHelper(root.right, root.val, len + 1);
            } else {
                longestConsecutiveHelper(root.left, root.val, 1);
                longestConsecutiveHelper(root.right, root.val, 1);
            }
            
        }
        
        
    }
    public int longestConsecutive(TreeNode root) {
        
        longestConsecutiveHelper(root, Integer.MAX_VALUE, 0);
        return longestConsecutiveSequencePath;
    }
}
