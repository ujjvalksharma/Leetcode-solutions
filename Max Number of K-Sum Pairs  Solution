class Solution {
    /*
    we map all the elements with their count, then we we move on we check if num-k and num is present and if it is we check the count of it in map and decrease it so there are no dublicate/repetion count.
    
    
    */
            HashMap<Integer,Integer> numToCount=new HashMap<Integer,Integer>();
    
    public void decreaseElementInMap(int num){
        if(numToCount.containsKey(num)){
                    if(numToCount.get(num)>1){
                        numToCount.put(num,numToCount.get(num)-1);
                    }else{
                        numToCount.remove(num);
                    }
                }
    }
    public int maxOperations(int[] nums, int k) {
     
        int totalOperations=0;
        for(int num:nums){
            if(!numToCount.containsKey(num)){
                numToCount.put(num,0);
            }
            numToCount.put(num,numToCount.get(num)+1);
        }
        
        for(int num:nums){
            if(numToCount.containsKey(num)&&numToCount.containsKey(k-num)){
           if(num==k-num&&numToCount.get(num)<2)
               continue;
                decreaseElementInMap(num);
                decreaseElementInMap(k-num);
                totalOperations++;
            }
        }
        
        return totalOperations;
    }
}
